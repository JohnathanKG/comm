#pragma once

#ifndef _INTERGEN_GENERATED__$name$_JS_H_
#define _INTERGEN_GENERATED__$name$_JS_H_

//@file Javascript interface file for $name$ interface generated by intergen
//See LICENSE file for copyright and license information

#include "../$hdrfile$"

#include <comm/intergen/ifc.js.h>
#include <comm/token.h>

$-[ns]$
namespace $@value$ {
$-[/ns]$
namespace js {

class $name$
{
public:
$-[method ?static]$

$(if !comments.empty)$$[comments]-$
    $@value$
$[/comments]$$(/if)-$
    /// @param scriptpath path to js script to bind to
    static iref<$..ns rest="::"$::$..name$> $name$( const ::js::script_handle& script__
        $-[args]$, $type$ $name$$size$ $-(if ?defval)$ = $defval$$(/if)$$[/args]$, const coid::token& bindvar = coid::token(), v8::Handle<v8::Context>* ctx=0 )
    {
        typedef iref<$..ns rest="::"$::$..name$> (*fn_bind)(const ::js::script_handle&$[args]$, $type$$[/args]$, const coid::token&, v8::Handle<v8::Context>*);
        static fn_bind binder = 0;
        static const coid::token ifckey = "$..ns rest="::" after="::"$$..name$.$name$@creator.js";

        if (!binder)
            binder = reinterpret_cast<fn_bind>(
                coid::interface_register::get_interface_creator(ifckey));

        if (!binder)
            throw coid::exception("interface binder inaccessible: ") << ifckey;

        return binder(script__$[args]$, $name$$[/args]$, bindvar, ctx);
    }
$-[/method]$
};

} //namespace js
$-[ns]$
} //namespace
$-[/ns]$


#endif //_INTERGEN_GENERATED__$name$_JS_H_
