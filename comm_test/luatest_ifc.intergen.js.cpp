
//@file  javascript interface dispatcher generated by intergen v5
//See LICENSE file for copyright and license information

#include <comm/metastream/metastream.h>
#include <comm/metastream/fmtstream_v8.h>
#include <comm/binstream/filestream.h>
#include <comm/binstream/binstreambuf.h>

#include "ifc/other.js.h"
#include "ifc/main.js.h"

using namespace coid;

#ifdef V8_MAJOR_VERSION

#define UNDEFINED           v8::Local<v8::Value>()
#define NULLv8(iso)         v8::Null(iso)

#define HANDLE_SCOPE(iso,hs)    v8::HandleScope hs(iso)
#define ESCAPABLE_SCOPE(iso,hs) v8::EscapableHandleScope hs(iso)
#define ESCAPE(hs,h)        hs.Escape(h)

#define ARGUMENTS           v8::FunctionCallbackInfo<v8::Value>
#define CBK_RET             void
#define CBK_UNDEFINED

#define NEWTYPE(iso,t)      v8::t::New(iso)
#define NEWTYPE2(iso,t,a)   v8::t::New(iso, a)
#define PERSISTENT(iso,o,n) o.Reset(iso, n)
#define RESET(o)            o.Reset()
#define LOCAL(iso,o)        o.Get(iso)
#define CUR_CONTEXT(iso)    iso->GetCurrentContext()

#else

#define UNDEFINED           v8::Undefined()
#define NULLv8(iso)         v8::Null()

#define HANDLE_SCOPE(iso,hs)    v8::HandleScope hs
#define ESCAPABLE_SCOPE(iso,hs) v8::HandleScope hs
#define ESCAPE(hs,h)        hs.Close(h)

#define ARGUMENTS           v8::Arguments
#define CBK_RET             v8::Handle<v8::Value>
#define CBK_UNDEFINED       v8::Undefined()

#define NEWTYPE(iso,t)      v8::t::New()
#define NEWTYPE2(iso,t,a)   v8::t::New(a)
#define PERSISTENT(iso,o,n) o = o.New(iso,n)
#define RESET(o)            do { if (!o.IsWeak()) o.Dispose(); o.Clear(); } while(0)
#define LOCAL(iso,o)        o
#define CUR_CONTEXT(iso)    v8::Context::GetCurrent()

#endif


// forward declarations for used iref arguments
v8::Handle<v8::Value> js_ns_other_create_wrapper( const iref<ns::other>&, v8::Handle<v8::Context> );
v8::Handle<v8::Value> js_ns_main_create_wrapper( const iref<ns::main>&, v8::Handle<v8::Context> );

////////////////////////////////////////////////////////////////////////////////
//
// javascript handler of interface other of class other_cls
//
////////////////////////////////////////////////////////////////////////////////

namespace ns {
namespace js {

////////////////////////////////////////////////////////////////////////////////
class other_js_dispatcher
    : public ::js::interface_wrapper_base<ns::other>
{
#ifdef V8_MAJOR_VERSION
    static void _js_release_callback(const v8::WeakCallbackInfo<void*>& data)
    {
        void* p = data.GetParameter();
        other_js_dispatcher* ifc = static_cast<other_js_dispatcher*>(p);
        ifc->_object.Empty();
        ifc->release_refcount();
    }

#else

    static void _js_release_callback(v8::Persistent<v8::Value> object, void* p)
    {
        other_js_dispatcher* ifc = static_cast<other_js_dispatcher*>(p);
        DASSERT( ifc->_object == object );
        ifc->_object.Clear();
        ifc->release_refcount();

        object.Dispose();
    }
#endif

protected:

    EBackend intergen_backend() const override { return IFC_BACKEND_JS; }

public:

    v8::Handle<v8::Object> create_interface_object( bool make_weak );

    static v8::Handle<v8::Script> load_script( const coid::token& scriptfile, const coid::token& file_name );

    COIDNEWDELETE("ns::other_js_dispatcher");

    other_js_dispatcher()
    {}

    other_js_dispatcher( ns::other* orig ) {
        _base.create(orig);
        _vtable = _base->vtable();
        //PERSISTENT(v8::Isolate::GetCurrent(), _context, context);

		_host = _base->host<policy_intrusive_base>();
    }

    ~other_js_dispatcher() {
        RESET(_object);

        //RESET(_script);
        //RESET(_context);
    }

    bool intergen_bind_capture( coid::binstring* capture, uint instid ) override
    {
        return _real()->intergen_bind_capture(capture, instid);
    }

    void intergen_capture_dispatch( uint mid, coid::binstring& bin ) override
    {
        _real()->intergen_capture_dispatch(mid, bin);
    }

    // --- creators ---

    static iref<other_js_dispatcher> create( const script_handle& scriptpath, const coid::charstr& str, const coid::token& bindname, v8::Handle<v8::Context>* );

    static v8::Handle<v8::Value> v8creator_create0(const ARGUMENTS& args, interface_context* ifc);

    ///Handler for generic $query_interface javascript method
    static CBK_RET v8query_interface( const ARGUMENTS& args );
    static CBK_RET v8query_interface_global( const ARGUMENTS& args );
    static CBK_RET v8log( const ARGUMENTS& args );
    static CBK_RET v8rebind_events( const ARGUMENTS& args );
    static CBK_RET v8current_global( const ARGUMENTS& args );

    // --- method wrappers ---

    static CBK_RET v8_get_str0( const ARGUMENTS& args );
    static CBK_RET v8_set_str1( const ARGUMENTS& args );
    static CBK_RET v8_some_fun12( const ARGUMENTS& args );
};

////////////////////////////////////////////////////////////////////////////////
CBK_RET other_js_dispatcher::v8_get_str0( const ARGUMENTS& args )
{
    v8::Isolate* iso = args.GetIsolate();

    if (args.Length() < 0 || args.Length() > 0) { //in/inout arguments
        coid::charstr tmp = "Wrong number of arguments in ";
        tmp << "other.get_str";
        return (CBK_RET)::js::THROW(iso, v8::Exception::SyntaxError, tmp);
    }

    ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::Local<v8::Object> obj__ = args.Holder();
    if (obj__.IsEmpty() || obj__->InternalFieldCount() == 0)
        return CBK_UNDEFINED;

    v8::Local<v8::Value> intobj__ = obj__->GetInternalField(0);
    if (!intobj__->IsExternal())
        return CBK_UNDEFINED;

    ::js::interface_wrapper_base<ns::other>* ifc = static_cast<::js::interface_wrapper_base<ns::other>*>
        (v8::Handle<v8::External>::Cast(intobj__)->Value());

    auto R_ = ifc ? ifc->_real() : 0;
    if (!R_) {
        coid::charstr tmp = "Null interface object in ";
        tmp << "other.get_str";
        return (CBK_RET)::js::THROW(iso, &v8::Exception::ReferenceError, tmp);
    }

    v8::Context::Scope context_scope(ifc->context(iso));

    try {
    THREAD_SINGLETON(v8_streamer_context).reset();

    //stream the arguments in

    //invoke
    const coid::charstr& _rval_ = R_->get_str();

    //stream out
    v8::Handle<v8::Value> r__;
    static_assert( CHECK::meta_operator_exists<coid::charstr>::value, "missing metastream operator for 'coid::charstr'" );
    r__ = to_v8(_rval_);

#ifdef V8_MAJOR_VERSION
    args.GetReturnValue().Set(r__);
#else
    return ESCAPE(handle_scope__, r__);
#endif

    } catch(const coid::exception& e) {
        return (CBK_RET)::js::THROW(iso, &v8::Exception::TypeError, e.text());
    }
}

////////////////////////////////////////////////////////////////////////////////
CBK_RET other_js_dispatcher::v8_set_str1( const ARGUMENTS& args )
{
    v8::Isolate* iso = args.GetIsolate();

    if (args.Length() < 1 || args.Length() > 1) { //in/inout arguments
        coid::charstr tmp = "Wrong number of arguments in ";
        tmp << "other.set_str";
        return (CBK_RET)::js::THROW(iso, v8::Exception::SyntaxError, tmp);
    }

    ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::Local<v8::Object> obj__ = args.Holder();
    if (obj__.IsEmpty() || obj__->InternalFieldCount() == 0)
        return CBK_UNDEFINED;

    v8::Local<v8::Value> intobj__ = obj__->GetInternalField(0);
    if (!intobj__->IsExternal())
        return CBK_UNDEFINED;

    ::js::interface_wrapper_base<ns::other>* ifc = static_cast<::js::interface_wrapper_base<ns::other>*>
        (v8::Handle<v8::External>::Cast(intobj__)->Value());

    auto R_ = ifc ? ifc->_real() : 0;
    if (!R_) {
        coid::charstr tmp = "Null interface object in ";
        tmp << "other.set_str";
        return (CBK_RET)::js::THROW(iso, &v8::Exception::ReferenceError, tmp);
    }

    v8::Context::Scope context_scope(ifc->context(iso));

    try {
    THREAD_SINGLETON(v8_streamer_context).reset();

    //stream the arguments in
    static_assert(CHECK::meta_operator_exists<coid::token>::value, "missing metastream operator 'coid::token'");

    threadcached<coid::token> new_str;
    from_v8(args[0], new_str);

    //invoke
    R_->set_str(new_str);

    //stream out
    v8::Handle<v8::Object> r__;

#ifdef V8_MAJOR_VERSION
    args.GetReturnValue().Set(r__);
#else
    return ESCAPE(handle_scope__, r__);
#endif

    } catch(const coid::exception& e) {
        return (CBK_RET)::js::THROW(iso, &v8::Exception::TypeError, e.text());
    }
}

////////////////////////////////////////////////////////////////////////////////
CBK_RET other_js_dispatcher::v8_some_fun12( const ARGUMENTS& args )
{
    v8::Isolate* iso = args.GetIsolate();

    if (args.Length() < 2 || args.Length() > 2) { //in/inout arguments
        coid::charstr tmp = "Wrong number of arguments in ";
        tmp << "other.some_fun1";
        return (CBK_RET)::js::THROW(iso, v8::Exception::SyntaxError, tmp);
    }

    ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::Local<v8::Object> obj__ = args.Holder();
    if (obj__.IsEmpty() || obj__->InternalFieldCount() == 0)
        return CBK_UNDEFINED;

    v8::Local<v8::Value> intobj__ = obj__->GetInternalField(0);
    if (!intobj__->IsExternal())
        return CBK_UNDEFINED;

    ::js::interface_wrapper_base<ns::other>* ifc = static_cast<::js::interface_wrapper_base<ns::other>*>
        (v8::Handle<v8::External>::Cast(intobj__)->Value());

    auto R_ = ifc ? ifc->_real() : 0;
    if (!R_) {
        coid::charstr tmp = "Null interface object in ";
        tmp << "other.some_fun1";
        return (CBK_RET)::js::THROW(iso, &v8::Exception::ReferenceError, tmp);
    }

    v8::Context::Scope context_scope(ifc->context(iso));

    try {
    THREAD_SINGLETON(v8_streamer_context).reset();

    //stream the arguments in
    static_assert(CHECK::meta_operator_exists<int>::value, "missing metastream operator 'int'");

    threadcached<int> a;
    from_v8(args[0], a);

    threadcached<iref<ns::other>> b;
    from_v8(args[1], b);

    //invoke
    int c;

    R_->some_fun1(a, b, &c);

    //stream out
    v8::Handle<v8::Object> r__ = NEWTYPE(iso, Object);
    static_assert( CHECK::meta_operator_exists<int>::value, "missing metastream operator for 'int'" );
    r__->Set(v8::symbol("a"), to_v8(a));
 
    r__->Set(v8::symbol("b"), js_ns_other_create_wrapper(b, ifc->context(iso)));
 
    static_assert( CHECK::meta_operator_exists<int>::value, "missing metastream operator for 'int'" );
    r__->Set(v8::symbol("c"), to_v8(c));
 
#ifdef V8_MAJOR_VERSION
    args.GetReturnValue().Set(r__);
#else
    return ESCAPE(handle_scope__, r__);
#endif

    } catch(const coid::exception& e) {
        return (CBK_RET)::js::THROW(iso, &v8::Exception::TypeError, e.text());
    }
}


////////////////////////////////////////////////////////////////////////////////
CBK_RET other_js_dispatcher::v8log( const ARGUMENTS& args )
{
    v8::Isolate* iso = args.GetIsolate();

    if (args.Length() == 0)
        return CBK_UNDEFINED;

    const void* inst = 0;

    v8::Local<v8::Object> obj__ = args.Holder();
    if (!obj__.IsEmpty() && obj__->InternalFieldCount() > 0) {
        v8::Local<v8::Value> intobj__ = obj__->GetInternalField(0);
        if (intobj__->IsExternal()) {
            ns::js::other_js_dispatcher* ifc = static_cast<ns::js::other_js_dispatcher*>
                (v8::Handle<v8::External>::Cast(intobj__)->Value());

            inst = ifc;
            if (!ifc)
                return (CBK_RET)::js::THROW(iso, &v8::Exception::ReferenceError, "Null interface object in $log");
        }
    }

    ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::String::Utf8Value key(args[0]);

    coid::token tokey(*key, key.length());

    intergen_interface::ifclog_ext(coid::ELogType::None, coid::tokenhash("ns::other"),
        inst, tokey);

    return CBK_UNDEFINED;
}

////////////////////////////////////////////////////////////////////////////////
CBK_RET other_js_dispatcher::v8query_interface( const ARGUMENTS& args )
{
    v8::Isolate* iso = args.GetIsolate();

    if (args.Length() < 1)
        return (CBK_RET)::js::THROW(iso, &v8::Exception::Error, "Interface creator name missing");

    ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::String::Utf8Value key(args[0]);

    typedef v8::Handle<v8::Value> (*fn_get)(const ARGUMENTS&, interface_context*);
    coid::token tokey(*key, key.length());
    fn_get get = reinterpret_cast<fn_get>(
        coid::interface_register::get_interface_creator(tokey));

    if (!get) {
        coid::charstr tmp = "interface creator ";
        tmp << tokey << " not found";
        return (CBK_RET)::js::THROW(iso, v8::Exception::Error, tmp);
    }

    v8::Local<v8::Object> obj__ = args.Holder();
    if (obj__.IsEmpty() || obj__->InternalFieldCount() == 0)
        return CBK_UNDEFINED;

    v8::Local<v8::Value> intobj__ = obj__->GetInternalField(0);
    if (!intobj__->IsExternal())
        return CBK_UNDEFINED;

    ns::js::other_js_dispatcher* ifc = static_cast<ns::js::other_js_dispatcher*>
        (v8::Handle<v8::External>::Cast(intobj__)->Value());

    if (!ifc)
        return (CBK_RET)::js::THROW(iso, &v8::Exception::ReferenceError, "Null interface object in $query_interface");

#ifdef V8_MAJOR_VERSION
    args.GetReturnValue().Set(get(args, ifc));
#else
    return ESCAPE(handle_scope__, get(args, ifc));
#endif
}

////////////////////////////////////////////////////////////////////////////////
CBK_RET other_js_dispatcher::v8query_interface_global( const ARGUMENTS& args )
{
    v8::Isolate* iso = args.GetIsolate();

    if (args.Length() < 1)
        return (CBK_RET)::js::THROW(iso, &v8::Exception::Error, "Interface creator name missing");

    ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::String::Utf8Value key(args[0]);

    typedef v8::Handle<v8::Value> (*fn_get)(const ARGUMENTS&, interface_context*);
    coid::token tokey(*key, key.length());
    fn_get get = reinterpret_cast<fn_get>(
        coid::interface_register::get_interface_creator(tokey));

    if (!get) {
        coid::charstr tmp = "interface creator ";
        tmp << tokey << " not found";
        return (CBK_RET)::js::THROW(iso, v8::Exception::Error, tmp);
    }

#ifdef V8_MAJOR_VERSION
    args.GetReturnValue().Set(get(args, 0));
#else
    return ESCAPE(handle_scope__, get(args, 0));
#endif
}

////////////////////////////////////////////////////////////////////////////////
CBK_RET other_js_dispatcher::v8rebind_events( const ARGUMENTS& args )
{
    return CBK_UNDEFINED;
}

////////////////////////////////////////////////////////////////////////////////
CBK_RET other_js_dispatcher::v8current_global( const ARGUMENTS& args )
{
    v8::Isolate* iso = args.GetIsolate();

    ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::Local<v8::Object> obj__ = args.Holder();
    if (obj__.IsEmpty() || obj__->InternalFieldCount() == 0)
        return CBK_UNDEFINED;

    v8::Local<v8::Value> intobj__ = obj__->GetInternalField(0);
    if (!intobj__->IsExternal())
        return CBK_UNDEFINED;

    ns::js::other_js_dispatcher* ifc = static_cast<ns::js::other_js_dispatcher*>
        (v8::Handle<v8::External>::Cast(intobj__)->Value());

#ifdef V8_MAJOR_VERSION
    args.GetReturnValue().Set(ifc->context(iso)->Global()->GetPrototype());
#else
    return ESCAPE(handle_scope__, ifc->context(iso)->Global()->GetPrototype());
#endif
}

////////////////////////////////////////////////////////////////////////////////
v8::Handle<v8::Object> other_js_dispatcher::create_interface_object( bool make_weak )
{
    v8::Isolate* iso = v8::Isolate::GetCurrent();

    static v8::Persistent<v8::ObjectTemplate> _objtempl;
    if (_objtempl.IsEmpty())
    {
        v8::Local<v8::ObjectTemplate> ot = NEWTYPE(iso, ObjectTemplate);
        ot->SetInternalFieldCount(2);    //ptr and class hash id

        ot->Set(v8::symbol("get_str"), NEWTYPE2(iso, FunctionTemplate, &v8_get_str0));
        ot->Set(v8::symbol("set_str"), NEWTYPE2(iso, FunctionTemplate, &v8_set_str1));
        ot->Set(v8::symbol("some_fun1"), NEWTYPE2(iso, FunctionTemplate, &v8_some_fun12));

        ot->Set(v8::symbol("$query_interface"), NEWTYPE2(iso, FunctionTemplate, &v8query_interface));
        ot->Set(v8::symbol("$rebind_events"), NEWTYPE2(iso, FunctionTemplate, &v8rebind_events));
        ot->Set(v8::symbol("$ctx"), NEWTYPE2(iso, FunctionTemplate, &v8current_global));
        ot->Set(v8::symbol("$log"), NEWTYPE2(iso, FunctionTemplate, &v8log));

        PERSISTENT(iso, _objtempl, ot);
    }

    v8::Local<v8::Object> obj = LOCAL(iso, _objtempl)->NewInstance();

    v8::Handle<v8::External> map_ptr = NEWTYPE2(iso, External, this);
    obj->SetInternalField(0, map_ptr);
    v8::Handle<v8::External> hash_ptr = NEWTYPE2(iso, External, (void*)ints(4122940601));
    obj->SetInternalField(1, hash_ptr);

    if (make_weak) {
        PERSISTENT(iso, _object, obj);

#ifdef V8_MAJOR_VERSION
        void* p = this;
        _object.SetWeak(&p, _js_release_callback, v8::WeakCallbackType::kParameter);
        //_context.SetWeak();
#else
        _object.MakeWeak(this, _js_release_callback);
        //_context.MakeWeak(0, _js_release_callback);
#endif
        add_refcount();
    }

    return obj;
}

////////////////////////////////////////////////////////////////////////////////
v8::Handle<v8::Script> other_js_dispatcher::load_script( const coid::token& script, const coid::token& fname )
{
    v8::Local<v8::String> scriptv8 = v8::string_utf8(script);

    // set up an error handler to catch any exceptions the script might throw.
    v8::TryCatch trycatch__;

    v8::Handle<v8::Script> compiled_script = v8::Script::Compile(scriptv8, v8::string_utf8(fname));
    if (trycatch__.HasCaught())
        script_handle::throw_js_error(trycatch__, "ns::js::other::load_script(): ");

    compiled_script->Run();
    if (trycatch__.HasCaught())
        script_handle::throw_js_error(trycatch__, "ns::js::other::load_script(): ");

    return compiled_script;
}

// --- creators ---

////////////////////////////////////////////////////////////////////////////////
iref<other_js_dispatcher> other_js_dispatcher::create( const script_handle& script, const coid::charstr& str, const coid::token& bindname, v8::Handle<v8::Context>* ctx )
{
    v8::Isolate* iso = v8::Isolate::GetCurrent();

    ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::Handle<v8::Context> context;

    // create interface object
    iref<other_js_dispatcher> ifc = ns::other::create(new other_js_dispatcher, str);
    if (!ifc)
        throw coid::exception() << "failed to create interface object";

    // check if an external context provider is required
    if (script.is_path()) {
        coid::token path = script.str();
        path.cut_right('?', coid::token::cut_trait_remove_sep_default_empty());

        bool ispage = path.begins_with("http://") || path.begins_with("https://") || path.ends_with(".html");
        bool isscript = path.ends_with(".js");

        if (ispage && !isscript) {
            typedef v8::Handle<v8::Context> (*fn_getctx)(const coid::token&, policy_intrusive_base*);

            fn_getctx ctxgetter = reinterpret_cast<fn_getctx>(
                    coid::interface_register::get_interface_creator("~html@system_context_getter2"));

            if (!ctxgetter)
                throw coid::exception() << "unable to acquire the system context creator interface";

            context = ctxgetter(script.str(), ifc.get());
        }
    }

    bool extctx = !context.IsEmpty();

    if (!extctx) {
        if (script.has_context())
            context = script.context();
        else
            context = NEWTYPE(iso, Context);
    }

    if (ctx)
        *ctx = ESCAPE(handle_scope__, context);

    v8::Context::Scope context_scope(context);
    //PERSISTENT(iso, ifc->_context, context);

    if (!extctx && !script.is_context())
    {
        if (!script.has_context()) {
            context->Global()->Set(v8::string_utf8("$include"), NEWTYPE2(iso, FunctionTemplate, &script_handle::js_include)->GetFunction());
            context->Global()->Set(v8::string_utf8("$query_interface"), NEWTYPE2(iso, FunctionTemplate, &other_js_dispatcher::v8query_interface_global)->GetFunction());
            context->Global()->Set(v8::string_utf8("$log"), NEWTYPE2(iso, FunctionTemplate, &other_js_dispatcher::v8log)->GetFunction());
        }

        coid::token script_tok;
        coid::charstr script_tmp;
        if (script.is_path()) {
            coid::bifstream bif (script.str());
            if (!bif.is_open())
                throw coid::exception() << script.str() << " not found";

            script_tmp = script.prefix();

            coid::binstreambuf buf;
            buf.swap(script_tmp);
            buf.transfer_from(bif);
            buf.swap(script_tmp);

            script_tok = script_tmp;
        }
        else if (script.prefix()) {
            script_tmp << script.prefix() << script.str();
            script_tok = script_tmp;
        }
        else {
            script_tok = script.str();
        }

        PERSISTENT(iso, ifc->_object, ifc->create_interface_object(false));
        if (bindname)
            context->Global()->Set(v8::string_utf8(bindname), LOCAL(iso, ifc->_object));

        v8::Handle<v8::Script> compiled_script = load_script(script_tok, script.url());

        //PERSISTENT(iso, ifc->_script, compiled_script);
    }
    else {
        PERSISTENT(iso, ifc->_object, ifc->create_interface_object(false));

        if (bindname)
            context->Global()->Set(v8::string_utf8(bindname), LOCAL(iso, ifc->_object));
    }

    return ifc;
}

////////////////////////////////////////////////////////////////////////////////
///Creator methods for access from JS
v8::Handle<v8::Value> other_js_dispatcher::v8creator_create0( const ARGUMENTS& args, interface_context* ifc )
{
    v8::Isolate* iso = args.GetIsolate();

    if (args.Length() < 1+1 || args.Length() > 1+1) { //fnc name + in/inout arguments
        coid::charstr tmp = "Wrong number of arguments in ";
        tmp << "create";
        ::js::THROW(iso, &v8::Exception::Error, tmp);
        return UNDEFINED;
    }

    ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::Local<v8::Object> obj__ = args.Holder();

    //ns::js::other_js_dispatcher* ifc = static_cast<ns::js::other_js_dispatcher*>
    //    (v8::Handle<v8::External>::Cast(obj__->GetInternalField(0))->Value());

    v8::Local<v8::Context> ctx = ifc && !ifc->_object.IsEmpty()
        ? ifc->context(iso)
        : CUR_CONTEXT(iso);
    v8::Context::Scope context_scope(ctx);

    //stream the arguments in
    THREAD_SINGLETON(v8_streamer_context).reset();

    static_assert(CHECK::meta_operator_exists<coid::charstr>::value, "missing metastream operator for 'coid::charstr'");
    threadcached<coid::charstr> str;
    from_v8(args[1+0], str);

    //invoke
    iref<other_js_dispatcher> nifc = ns::other::create(new other_js_dispatcher, str);
    //if (nifc)
    //    PERSISTENT(iso, nifc->_context, ctx);//ifc->_context);

    //stream out
    v8::Handle<v8::Value> r__ = nifc ? v8::Handle<v8::Value>(nifc->create_interface_object(true)) : NULLv8(iso);
    
    return ESCAPE(handle_scope__, r__);
}

////////////////////////////////////////////////////////////////////////////////
///Create JS wrapper from an existing interface object
v8::Handle<v8::Value> create_wrapper_other( ::ns::other* orig, v8::Handle<v8::Context> context )
{
    v8::Isolate* iso = v8::Isolate::GetCurrent();

    // check that the orig points to an object
    if (!orig) return NULLv8(iso);

    if (context.IsEmpty()) {
        context = CUR_CONTEXT(iso);
    }

    v8::Context::Scope context_scope(context);
    ESCAPABLE_SCOPE(iso, scope);

    iref<ns::js::other_js_dispatcher> ifc;
    v8::Handle<v8::Object> obj;

    if (orig->intergen_backend() == intergen_interface::IFC_BACKEND_JS)
        obj = LOCAL(iso, static_cast<other_js_dispatcher*>(orig)->_object);

    if (obj.IsEmpty()) {
        // create interface object
        ifc.create(new ns::js::other_js_dispatcher(static_cast<::ns::other*>(orig)));

        obj = ifc->create_interface_object(true);
    }

    return ESCAPE(scope, obj);
}

////////////////////////////////////////////////////////////////////////////////
static void register_binders_for_other( bool on )
{
    interface_register::register_interface_creator(
        "ns::js::other.create@creator",
        on ? (void*)&other_js_dispatcher::create : nullptr);
    interface_register::register_interface_creator(
        "ns::js::other.create",
        on ? (void*)&other_js_dispatcher::v8creator_create0 : nullptr);
    interface_register::register_interface_creator(
        "ns::js::other@wrapper",
        on ? (void*)&create_wrapper_other : nullptr);

}

//auto-register the bind function
LOCAL_SINGLETON_DEF(ifc_autoregger) other_autoregger = new ifc_autoregger(&register_binders_for_other);


void* force_register_js_other() {
    LOCAL_SINGLETON_DEF(ifc_autoregger) autoregger = new ifc_autoregger(&register_binders_for_other);
    return autoregger.get();
}

} //namespace js
} //namespace ns

////////////////////////////////////////////////////////////////////////////////
///Create JS wrapper from an existing interface object
v8::Handle<v8::Value> js_ns_other_create_wrapper( const iref<ns::other>& orig, v8::Handle<v8::Context> context )
{
    return ns::js::create_wrapper_other(orig.get(), context);
}
////////////////////////////////////////////////////////////////////////////////
//
// javascript handler of interface main of class main_cls
//
////////////////////////////////////////////////////////////////////////////////

namespace ns {
namespace js {

////////////////////////////////////////////////////////////////////////////////
class main_js_dispatcher
    : public ::js::interface_wrapper_base<ns::main>
{
    v8::Persistent<v8::Function> _events[4];
    //v8::Persistent<v8::Object> _eventobj;
    bool _bound_events;

#ifdef V8_MAJOR_VERSION
    static void _js_release_callback(const v8::WeakCallbackInfo<void*>& data)
    {
        void* p = data.GetParameter();
        main_js_dispatcher* ifc = static_cast<main_js_dispatcher*>(p);
        ifc->_object.Empty();
        ifc->release_refcount();
    }

#else

    static void _js_release_callback(v8::Persistent<v8::Value> object, void* p)
    {
        main_js_dispatcher* ifc = static_cast<main_js_dispatcher*>(p);
        DASSERT( ifc->_object == object );
        ifc->_object.Clear();
        ifc->release_refcount();

        object.Dispose();
    }
#endif

protected:

    EBackend intergen_backend() const override { return IFC_BACKEND_JS; }

public:

    v8::Handle<v8::Object> create_interface_object( bool make_weak );

    static v8::Handle<v8::Script> load_script( const coid::token& scriptfile, const coid::token& file_name );
    void bind_events( v8::Handle<v8::Context> context, bool force, v8::Handle<v8::Value> ref );

    COIDNEWDELETE("ns::main_js_dispatcher");

    main_js_dispatcher() : _bound_events(false)
    {}

    main_js_dispatcher( ns::main* orig ) : _bound_events(false) {
        _base.create(orig);
        _vtable = _base->vtable();
        //PERSISTENT(v8::Isolate::GetCurrent(), _context, context);

		_host = _base->host<policy_intrusive_base>();
    }

    ~main_js_dispatcher() {
        //RESET(_eventobj);

        for (int i=0; i<4; ++i) {
            RESET(_events[i]);
        }

        RESET(_object);

        //RESET(_script);
        //RESET(_context);
    }

    bool intergen_bind_capture( coid::binstring* capture, uint instid ) override
    {
        return _real()->intergen_bind_capture(capture, instid);
    }

    void intergen_capture_dispatch( uint mid, coid::binstring& bin ) override
    {
        _real()->intergen_capture_dispatch(mid, bin);
    }

    // --- creators ---

    static iref<main_js_dispatcher> create( const script_handle& scriptpath, const coid::token& bindname, v8::Handle<v8::Context>* );

    static v8::Handle<v8::Value> v8creator_create0(const ARGUMENTS& args, interface_context* ifc);

    static iref<main_js_dispatcher> create_special( const script_handle& scriptpath, int a, iref<ns::other> b, int& c, iref<ns::other>& d, int e, const coid::token& bindname, v8::Handle<v8::Context>* );

    static v8::Handle<v8::Value> v8creator_create_special1(const ARGUMENTS& args, interface_context* ifc);

    static iref<main_js_dispatcher> create_wp( const script_handle& scriptpath, int a, int& b, int& c, int d, const coid::token& bindname, v8::Handle<v8::Context>* );

    static v8::Handle<v8::Value> v8creator_create_wp2(const ARGUMENTS& args, interface_context* ifc);

    ///Handler for generic $query_interface javascript method
    static CBK_RET v8query_interface( const ARGUMENTS& args );
    static CBK_RET v8query_interface_global( const ARGUMENTS& args );
    static CBK_RET v8log( const ARGUMENTS& args );
    static CBK_RET v8rebind_events( const ARGUMENTS& args );
    static CBK_RET v8current_global( const ARGUMENTS& args );

    // --- method wrappers ---

    static CBK_RET v8_some_get0( const ARGUMENTS& args );
    static CBK_RET v8_get_a1( const ARGUMENTS& args );
    static CBK_RET v8_set_a2( const ARGUMENTS& args );
    static CBK_RET v8_fun13( const ARGUMENTS& args );
    static CBK_RET v8_fun24( const ARGUMENTS& args );

    // --- interface events ---

    virtual void evt1( int a, int* b, iref<ns::other>& d ) override;
    virtual coid::charstr evt2( int a, int* b, ns1::dummy& c, iref<ns::other>& d, iref<ns::other> e ) override;
    virtual iref<ns::other> evt3( const coid::token& msg ) override;
    virtual iref<ns::main> evt4( int a, iref<ns::other> b, int& c, iref<ns::other>& d, int e = -1 ) override;

    virtual bool is_bound_evt1() override { return is_event_bound(0); }
    virtual bool is_bound_evt2() override { return is_event_bound(1); }
    virtual bool is_bound_evt3() override { return is_event_bound(2); }
    virtual bool is_bound_evt4() override { return is_event_bound(3); }

    virtual void force_bind_script_events() {
        v8::Isolate* iso = v8::Isolate::GetCurrent();
        //v8::Context::Scope context_scope(LOCAL(iso, _context));
        HANDLE_SCOPE(iso, handle_scope__);
        v8::TryCatch trycatch__;

        bind_events(context(iso), true, v8::Local<v8::Value>());
    }

private:
    bool is_event_bound( int id )
    {
        v8::Isolate* iso = v8::Isolate::GetCurrent();

        if (!_bound_events) {
            //v8::Context::Scope context_scope(LOCAL(iso, _context));
            HANDLE_SCOPE(iso, handle_scope__);
            v8::TryCatch trycatch__;

            bind_events(context(iso), false, UNDEFINED);
        }

        return !_events[id].IsEmpty() && !LOCAL(iso, _events[id])->IsUndefined();
    }

    //event wrappers for event invocation from js
    static CBK_RET v8_evback_evt10(const ARGUMENTS& args);
    static CBK_RET v8_evback_evt21(const ARGUMENTS& args);
    static CBK_RET v8_evback_evt32(const ARGUMENTS& args);
    static CBK_RET v8_evback_evt43(const ARGUMENTS& args);
};

////////////////////////////////////////////////////////////////////////////////
CBK_RET main_js_dispatcher::v8_some_get0( const ARGUMENTS& args )
{
    v8::Isolate* iso = args.GetIsolate();

    if (args.Length() < 0 || args.Length() > 0) { //in/inout arguments
        coid::charstr tmp = "Wrong number of arguments in ";
        tmp << "main.some_get";
        return (CBK_RET)::js::THROW(iso, v8::Exception::SyntaxError, tmp);
    }

    ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::Local<v8::Object> obj__ = args.Holder();
    if (obj__.IsEmpty() || obj__->InternalFieldCount() == 0)
        return CBK_UNDEFINED;

    v8::Local<v8::Value> intobj__ = obj__->GetInternalField(0);
    if (!intobj__->IsExternal())
        return CBK_UNDEFINED;

    ::js::interface_wrapper_base<ns::main>* ifc = static_cast<::js::interface_wrapper_base<ns::main>*>
        (v8::Handle<v8::External>::Cast(intobj__)->Value());

    auto R_ = ifc ? ifc->_real() : 0;
    if (!R_) {
        coid::charstr tmp = "Null interface object in ";
        tmp << "main.some_get";
        return (CBK_RET)::js::THROW(iso, &v8::Exception::ReferenceError, tmp);
    }

    v8::Context::Scope context_scope(ifc->context(iso));

    try {
    THREAD_SINGLETON(v8_streamer_context).reset();

    //stream the arguments in

    //invoke
    coid::charstr a;

    iref<ns::other> _rval_ = R_->some_get(a);

    //stream out
    v8::Handle<v8::Object> r__ = NEWTYPE(iso, Object);
    r__->Set(v8::symbol("$ret"), js_ns_other_create_wrapper(_rval_, ifc->context(iso)));

    static_assert( CHECK::meta_operator_exists<coid::charstr>::value, "missing metastream operator for 'coid::charstr'" );
    r__->Set(v8::symbol("a"), to_v8(a));
 
#ifdef V8_MAJOR_VERSION
    args.GetReturnValue().Set(r__);
#else
    return ESCAPE(handle_scope__, r__);
#endif

    } catch(const coid::exception& e) {
        return (CBK_RET)::js::THROW(iso, &v8::Exception::TypeError, e.text());
    }
}

////////////////////////////////////////////////////////////////////////////////
CBK_RET main_js_dispatcher::v8_get_a1( const ARGUMENTS& args )
{
    v8::Isolate* iso = args.GetIsolate();

    if (args.Length() < 0 || args.Length() > 0) { //in/inout arguments
        coid::charstr tmp = "Wrong number of arguments in ";
        tmp << "main.get_a";
        return (CBK_RET)::js::THROW(iso, v8::Exception::SyntaxError, tmp);
    }

    ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::Local<v8::Object> obj__ = args.Holder();
    if (obj__.IsEmpty() || obj__->InternalFieldCount() == 0)
        return CBK_UNDEFINED;

    v8::Local<v8::Value> intobj__ = obj__->GetInternalField(0);
    if (!intobj__->IsExternal())
        return CBK_UNDEFINED;

    ::js::interface_wrapper_base<ns::main>* ifc = static_cast<::js::interface_wrapper_base<ns::main>*>
        (v8::Handle<v8::External>::Cast(intobj__)->Value());

    auto R_ = ifc ? ifc->_real() : 0;
    if (!R_) {
        coid::charstr tmp = "Null interface object in ";
        tmp << "main.get_a";
        return (CBK_RET)::js::THROW(iso, &v8::Exception::ReferenceError, tmp);
    }

    v8::Context::Scope context_scope(ifc->context(iso));

    try {
    THREAD_SINGLETON(v8_streamer_context).reset();

    //stream the arguments in

    //invoke
    int _rval_ = R_->get_a();

    //stream out
    v8::Handle<v8::Value> r__;
    static_assert( CHECK::meta_operator_exists<int>::value, "missing metastream operator for 'int'" );
    r__ = to_v8(_rval_);

#ifdef V8_MAJOR_VERSION
    args.GetReturnValue().Set(r__);
#else
    return ESCAPE(handle_scope__, r__);
#endif

    } catch(const coid::exception& e) {
        return (CBK_RET)::js::THROW(iso, &v8::Exception::TypeError, e.text());
    }
}

////////////////////////////////////////////////////////////////////////////////
CBK_RET main_js_dispatcher::v8_set_a2( const ARGUMENTS& args )
{
    v8::Isolate* iso = args.GetIsolate();

    if (args.Length() < 1 || args.Length() > 1) { //in/inout arguments
        coid::charstr tmp = "Wrong number of arguments in ";
        tmp << "main.set_a";
        return (CBK_RET)::js::THROW(iso, v8::Exception::SyntaxError, tmp);
    }

    ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::Local<v8::Object> obj__ = args.Holder();
    if (obj__.IsEmpty() || obj__->InternalFieldCount() == 0)
        return CBK_UNDEFINED;

    v8::Local<v8::Value> intobj__ = obj__->GetInternalField(0);
    if (!intobj__->IsExternal())
        return CBK_UNDEFINED;

    ::js::interface_wrapper_base<ns::main>* ifc = static_cast<::js::interface_wrapper_base<ns::main>*>
        (v8::Handle<v8::External>::Cast(intobj__)->Value());

    auto R_ = ifc ? ifc->_real() : 0;
    if (!R_) {
        coid::charstr tmp = "Null interface object in ";
        tmp << "main.set_a";
        return (CBK_RET)::js::THROW(iso, &v8::Exception::ReferenceError, tmp);
    }

    v8::Context::Scope context_scope(ifc->context(iso));

    try {
    THREAD_SINGLETON(v8_streamer_context).reset();

    //stream the arguments in
    static_assert(CHECK::meta_operator_exists<int>::value, "missing metastream operator 'int'");

    threadcached<int> a;
    from_v8(args[0], a);

    //invoke
    R_->set_a(a);

    //stream out
    v8::Handle<v8::Object> r__;

#ifdef V8_MAJOR_VERSION
    args.GetReturnValue().Set(r__);
#else
    return ESCAPE(handle_scope__, r__);
#endif

    } catch(const coid::exception& e) {
        return (CBK_RET)::js::THROW(iso, &v8::Exception::TypeError, e.text());
    }
}

////////////////////////////////////////////////////////////////////////////////
CBK_RET main_js_dispatcher::v8_fun13( const ARGUMENTS& args )
{
    v8::Isolate* iso = args.GetIsolate();

    if (args.Length() < 4 || args.Length() > 4) { //in/inout arguments
        coid::charstr tmp = "Wrong number of arguments in ";
        tmp << "main.fun1";
        return (CBK_RET)::js::THROW(iso, v8::Exception::SyntaxError, tmp);
    }

    ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::Local<v8::Object> obj__ = args.Holder();
    if (obj__.IsEmpty() || obj__->InternalFieldCount() == 0)
        return CBK_UNDEFINED;

    v8::Local<v8::Value> intobj__ = obj__->GetInternalField(0);
    if (!intobj__->IsExternal())
        return CBK_UNDEFINED;

    ::js::interface_wrapper_base<ns::main>* ifc = static_cast<::js::interface_wrapper_base<ns::main>*>
        (v8::Handle<v8::External>::Cast(intobj__)->Value());

    auto R_ = ifc ? ifc->_real() : 0;
    if (!R_) {
        coid::charstr tmp = "Null interface object in ";
        tmp << "main.fun1";
        return (CBK_RET)::js::THROW(iso, &v8::Exception::ReferenceError, tmp);
    }

    v8::Context::Scope context_scope(ifc->context(iso));

    try {
    THREAD_SINGLETON(v8_streamer_context).reset();

    //stream the arguments in
    static_assert(CHECK::meta_operator_exists<int>::value, "missing metastream operator 'int'");
    static_assert(CHECK::meta_operator_exists<ns1::dummy>::value, "missing metastream operator 'ns1::dummy'");
    static_assert(CHECK::meta_operator_exists<float>::value, "missing metastream operator 'float'");
    static_assert(CHECK::meta_operator_exists<coid::charstr>::value, "missing metastream operator 'coid::charstr'");

    threadcached<int> a;
    from_v8(args[0], a);

    threadcached<ns1::dummy> b;
    from_v8(args[1], b);

    threadcached<float> c;
    from_v8(args[2], c);

    threadcached<coid::charstr> g;
    from_v8(args[3], g);

    //invoke
    ns1::dummy d;

    int e;

    iref<ns::other> f;

    R_->fun1(a, b, &c, d, &e, f, g);

    //stream out
    v8::Handle<v8::Object> r__ = NEWTYPE(iso, Object);
    static_assert( CHECK::meta_operator_exists<ns1::dummy>::value, "missing metastream operator for 'ns1::dummy'" );
    r__->Set(v8::symbol("d"), to_v8(d));
 
    static_assert( CHECK::meta_operator_exists<int>::value, "missing metastream operator for 'int'" );
    r__->Set(v8::symbol("e"), to_v8(e));
 
    r__->Set(v8::symbol("f"), js_ns_other_create_wrapper(f, ifc->context(iso)));
 
#ifdef V8_MAJOR_VERSION
    args.GetReturnValue().Set(r__);
#else
    return ESCAPE(handle_scope__, r__);
#endif

    } catch(const coid::exception& e) {
        return (CBK_RET)::js::THROW(iso, &v8::Exception::TypeError, e.text());
    }
}

////////////////////////////////////////////////////////////////////////////////
CBK_RET main_js_dispatcher::v8_fun24( const ARGUMENTS& args )
{
    v8::Isolate* iso = args.GetIsolate();

    if (args.Length() < 2 || args.Length() > 2) { //in/inout arguments
        coid::charstr tmp = "Wrong number of arguments in ";
        tmp << "main.fun2";
        return (CBK_RET)::js::THROW(iso, v8::Exception::SyntaxError, tmp);
    }

    ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::Local<v8::Object> obj__ = args.Holder();
    if (obj__.IsEmpty() || obj__->InternalFieldCount() == 0)
        return CBK_UNDEFINED;

    v8::Local<v8::Value> intobj__ = obj__->GetInternalField(0);
    if (!intobj__->IsExternal())
        return CBK_UNDEFINED;

    ::js::interface_wrapper_base<ns::main>* ifc = static_cast<::js::interface_wrapper_base<ns::main>*>
        (v8::Handle<v8::External>::Cast(intobj__)->Value());

    auto R_ = ifc ? ifc->_real() : 0;
    if (!R_) {
        coid::charstr tmp = "Null interface object in ";
        tmp << "main.fun2";
        return (CBK_RET)::js::THROW(iso, &v8::Exception::ReferenceError, tmp);
    }

    v8::Context::Scope context_scope(ifc->context(iso));

    try {
    THREAD_SINGLETON(v8_streamer_context).reset();

    //stream the arguments in
    static_assert(CHECK::meta_operator_exists<int>::value, "missing metastream operator 'int'");

    threadcached<int> a;
    from_v8(args[0], a);

    threadcached<iref<ns::other>> b;
    from_v8(args[1], b);

    //invoke
    int c;

    iref<ns::other> d;

    coid::charstr _rval_ = R_->fun2(a, b, c, d);

    //stream out
    static_assert( CHECK::meta_operator_exists<coid::charstr>::value, "missing metastream operator for 'coid::charstr'" );
    v8::Handle<v8::Object> r__ = NEWTYPE(iso, Object);
    r__->Set(v8::symbol("$ret"), to_v8(_rval_));

    static_assert( CHECK::meta_operator_exists<int>::value, "missing metastream operator for 'int'" );
    r__->Set(v8::symbol("c"), to_v8(c));
 
    r__->Set(v8::symbol("d"), js_ns_other_create_wrapper(d, ifc->context(iso)));
 
#ifdef V8_MAJOR_VERSION
    args.GetReturnValue().Set(r__);
#else
    return ESCAPE(handle_scope__, r__);
#endif

    } catch(const coid::exception& e) {
        return (CBK_RET)::js::THROW(iso, &v8::Exception::TypeError, e.text());
    }
}

////////////////////////////////////////////////////////////////////////////////
void main_js_dispatcher::evt1( int a, int* b, iref<ns::other>& d )
{
    v8::Isolate* iso = v8::Isolate::GetCurrent();

    HANDLE_SCOPE(iso, handle_scope__);
    v8::Context::Scope context_scope__(context(iso));
    v8::TryCatch trycatch__;

    bind_events(context(iso), false, UNDEFINED);
    auto ev__ = LOCAL(iso, _events[0]);

    if (_events[0].IsEmpty() || ev__->IsUndefined())
        throw coid::exception("handler not implemented");

// prepare in arguments
    THREAD_SINGLETON(v8_streamer_context).reset();

    static_assert( CHECK::meta_operator_exists<int>::value, "missing metastream operator for 'int'" );
    v8::Handle<v8::Value> __inargs[] = {
        v8_streamer<int>::to_v8(a)
    };

//  event call
    v8::Local<v8::Value> r__ = ev__->Call(
        LOCAL(iso, _object),
        //_eventobj.IsEmpty() || LOCAL(iso,_eventobj)->IsUndefined() ? LOCAL(iso,_object) : LOCAL(iso,_eventobj),
        1, __inargs);


    if (trycatch__.HasCaught())
        script_handle::throw_js_error(trycatch__, "ns::js::main.evt1(): ");
// gather results

    if (!r__->IsObject()) throw coid::exception("invalid params");
    v8::Local<v8::Object> obj__ = r__->ToObject();

    static_assert( CHECK::meta_operator_exists<int>::value, "missing metastream operator for 'int'" );
    if (b)
        from_v8(obj__->Get(v8::symbol("b")), *b);

    from_v8(obj__->Get(v8::symbol("d")), d);

}

////////////////////////////////////////////////////////////////////////////////
CBK_RET main_js_dispatcher::v8_evback_evt10( const ARGUMENTS& args )
{
    v8::Isolate* iso = args.GetIsolate();

    ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::Local<v8::Object> obj__ = args.Holder();
    if (obj__.IsEmpty() || obj__->InternalFieldCount() == 0)
        return CBK_UNDEFINED;

    v8::Local<v8::Value> intobj__ = obj__->GetInternalField(0);
    if (!intobj__->IsExternal())
        return CBK_UNDEFINED;

    ns::js::main_js_dispatcher* ifc = static_cast<ns::js::main_js_dispatcher*>
        (v8::Handle<v8::External>::Cast(intobj__)->Value());

    v8::Handle<v8::Context> ctx = ifc->context(iso);
    v8::Context::Scope context_scope(ctx);
    v8::TryCatch trycatch__;

    ifc->bind_events(ctx, false, UNDEFINED);
    auto ev__ = LOCAL(iso, ifc->_events[0]);

    if (ifc->_events[0].IsEmpty() || ev__->IsUndefined()) {
        coid::charstr tmp = "Event not available: ";
        tmp << "evt1";
        return (CBK_RET)::js::THROW(iso, &v8::Exception::ReferenceError, tmp);
    }

    v8::Local<v8::Value> largs[1];
    int nargs = args.Length();
    if (nargs > 1)
        nargs = 1;
    for (int i=0; i<nargs; ++i)
        largs[i] = args[i];

    v8::Local<v8::Value> r__ = ev__->Call(
        LOCAL(iso, ifc->_object),
        //ifc->_eventobj.IsEmpty() || LOCAL(iso, ifc->_eventobj)->IsUndefined() ? LOCAL(iso, ifc->_object) : LOCAL(iso, ifc->_eventobj),
        nargs, largs);

#ifdef V8_MAJOR_VERSION
    args.GetReturnValue().Set(r__);
#else
    return ESCAPE(handle_scope__, r__);
#endif
}

////////////////////////////////////////////////////////////////////////////////
coid::charstr main_js_dispatcher::evt2( int a, int* b, ns1::dummy& c, iref<ns::other>& d, iref<ns::other> e )
{
    v8::Isolate* iso = v8::Isolate::GetCurrent();

    HANDLE_SCOPE(iso, handle_scope__);
    v8::Context::Scope context_scope__(context(iso));
    v8::TryCatch trycatch__;

    bind_events(context(iso), false, UNDEFINED);
    auto ev__ = LOCAL(iso, _events[1]);

    if (_events[1].IsEmpty() || ev__->IsUndefined())
        throw coid::exception("handler not implemented");

// prepare in arguments
    THREAD_SINGLETON(v8_streamer_context).reset();

    static_assert( CHECK::meta_operator_exists<int>::value, "missing metastream operator for 'int'" );
    static_assert( CHECK::meta_operator_exists<ns1::dummy>::value, "missing metastream operator for 'ns1::dummy'" );
    v8::Handle<v8::Value> __inargs[] = {
        v8_streamer<int>::to_v8(a),
        v8_streamer<ns1::dummy>::to_v8(c),
        v8_streamer<iref<ns::other>>::to_v8(e)
    };

//  event call
    v8::Local<v8::Value> r__ = ev__->Call(
        LOCAL(iso, _object),
        //_eventobj.IsEmpty() || LOCAL(iso,_eventobj)->IsUndefined() ? LOCAL(iso,_object) : LOCAL(iso,_eventobj),
        3, __inargs);


    if (trycatch__.HasCaught())
        script_handle::throw_js_error(trycatch__, "ns::js::main.evt2(): ");
// gather results

    if (!r__->IsObject()) throw coid::exception("invalid params");
    v8::Local<v8::Object> obj__ = r__->ToObject();

    //return value
    static_assert( CHECK::meta_operator_exists<coid::charstr>::value, "missing metastream operator for 'coid::charstr'" );
    threadcached<coid::charstr> _rval_;
    from_v8(r__, _rval_);

    static_assert( CHECK::meta_operator_exists<int>::value, "missing metastream operator for 'int'" );
    if (b)
        from_v8(obj__->Get(v8::symbol("b")), *b);

    static_assert( CHECK::meta_operator_exists<ns1::dummy>::value, "missing metastream operator for 'ns1::dummy'" );
    from_v8(obj__->Get(v8::symbol("c")), c);

    from_v8(obj__->Get(v8::symbol("d")), d);

    return _rval_;
}

////////////////////////////////////////////////////////////////////////////////
CBK_RET main_js_dispatcher::v8_evback_evt21( const ARGUMENTS& args )
{
    v8::Isolate* iso = args.GetIsolate();

    ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::Local<v8::Object> obj__ = args.Holder();
    if (obj__.IsEmpty() || obj__->InternalFieldCount() == 0)
        return CBK_UNDEFINED;

    v8::Local<v8::Value> intobj__ = obj__->GetInternalField(0);
    if (!intobj__->IsExternal())
        return CBK_UNDEFINED;

    ns::js::main_js_dispatcher* ifc = static_cast<ns::js::main_js_dispatcher*>
        (v8::Handle<v8::External>::Cast(intobj__)->Value());

    v8::Handle<v8::Context> ctx = ifc->context(iso);
    v8::Context::Scope context_scope(ctx);
    v8::TryCatch trycatch__;

    ifc->bind_events(ctx, false, UNDEFINED);
    auto ev__ = LOCAL(iso, ifc->_events[1]);

    if (ifc->_events[1].IsEmpty() || ev__->IsUndefined()) {
        coid::charstr tmp = "Event not available: ";
        tmp << "evt2";
        return (CBK_RET)::js::THROW(iso, &v8::Exception::ReferenceError, tmp);
    }

    v8::Local<v8::Value> largs[3];
    int nargs = args.Length();
    if (nargs > 3)
        nargs = 3;
    for (int i=0; i<nargs; ++i)
        largs[i] = args[i];

    v8::Local<v8::Value> r__ = ev__->Call(
        LOCAL(iso, ifc->_object),
        //ifc->_eventobj.IsEmpty() || LOCAL(iso, ifc->_eventobj)->IsUndefined() ? LOCAL(iso, ifc->_object) : LOCAL(iso, ifc->_eventobj),
        nargs, largs);

#ifdef V8_MAJOR_VERSION
    args.GetReturnValue().Set(r__);
#else
    return ESCAPE(handle_scope__, r__);
#endif
}

////////////////////////////////////////////////////////////////////////////////
iref<ns::other> main_js_dispatcher::evt3( const coid::token& msg )
{
    v8::Isolate* iso = v8::Isolate::GetCurrent();

    HANDLE_SCOPE(iso, handle_scope__);
    v8::Context::Scope context_scope__(context(iso));
    v8::TryCatch trycatch__;

    bind_events(context(iso), false, UNDEFINED);
    auto ev__ = LOCAL(iso, _events[2]);

    if (_events[2].IsEmpty() || ev__->IsUndefined())
        throw coid::exception("handler not implemented");

// prepare in arguments
    THREAD_SINGLETON(v8_streamer_context).reset();

    static_assert( CHECK::meta_operator_exists<coid::token>::value, "missing metastream operator for 'coid::token'" );
    v8::Handle<v8::Value> __inargs[] = {
        v8_streamer<coid::token>::to_v8(msg)
    };

//  event call
    v8::Local<v8::Value> r__ = ev__->Call(
        LOCAL(iso, _object),
        //_eventobj.IsEmpty() || LOCAL(iso,_eventobj)->IsUndefined() ? LOCAL(iso,_object) : LOCAL(iso,_eventobj),
        1, __inargs);


    if (trycatch__.HasCaught())
        script_handle::throw_js_error(trycatch__, "ns::js::main.evt3(): ");
// gather results

    iref<ns::other> _rval_;
    from_v8(r__, _rval_);
    return _rval_;
}

////////////////////////////////////////////////////////////////////////////////
CBK_RET main_js_dispatcher::v8_evback_evt32( const ARGUMENTS& args )
{
    v8::Isolate* iso = args.GetIsolate();

    ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::Local<v8::Object> obj__ = args.Holder();
    if (obj__.IsEmpty() || obj__->InternalFieldCount() == 0)
        return CBK_UNDEFINED;

    v8::Local<v8::Value> intobj__ = obj__->GetInternalField(0);
    if (!intobj__->IsExternal())
        return CBK_UNDEFINED;

    ns::js::main_js_dispatcher* ifc = static_cast<ns::js::main_js_dispatcher*>
        (v8::Handle<v8::External>::Cast(intobj__)->Value());

    v8::Handle<v8::Context> ctx = ifc->context(iso);
    v8::Context::Scope context_scope(ctx);
    v8::TryCatch trycatch__;

    ifc->bind_events(ctx, false, UNDEFINED);
    auto ev__ = LOCAL(iso, ifc->_events[2]);

    if (ifc->_events[2].IsEmpty() || ev__->IsUndefined()) {
        coid::charstr tmp = "Event not available: ";
        tmp << "evt3";
        return (CBK_RET)::js::THROW(iso, &v8::Exception::ReferenceError, tmp);
    }

    v8::Local<v8::Value> largs[1];
    int nargs = args.Length();
    if (nargs > 1)
        nargs = 1;
    for (int i=0; i<nargs; ++i)
        largs[i] = args[i];

    v8::Local<v8::Value> r__ = ev__->Call(
        LOCAL(iso, ifc->_object),
        //ifc->_eventobj.IsEmpty() || LOCAL(iso, ifc->_eventobj)->IsUndefined() ? LOCAL(iso, ifc->_object) : LOCAL(iso, ifc->_eventobj),
        nargs, largs);

#ifdef V8_MAJOR_VERSION
    args.GetReturnValue().Set(r__);
#else
    return ESCAPE(handle_scope__, r__);
#endif
}

////////////////////////////////////////////////////////////////////////////////
iref<ns::main> main_js_dispatcher::evt4( int a, iref<ns::other> b, int& c, iref<ns::other>& d, int e )
{
    v8::Isolate* iso = v8::Isolate::GetCurrent();

    HANDLE_SCOPE(iso, handle_scope__);
    v8::Context::Scope context_scope__(context(iso));
    v8::TryCatch trycatch__;

    bind_events(context(iso), false, UNDEFINED);
    auto ev__ = LOCAL(iso, _events[3]);

    if (_events[3].IsEmpty() || ev__->IsUndefined())
        throw coid::exception("handler not implemented");

// prepare in arguments
    THREAD_SINGLETON(v8_streamer_context).reset();

    static_assert( CHECK::meta_operator_exists<int>::value, "missing metastream operator for 'int'" );
    static_assert( CHECK::meta_operator_exists<int>::value, "missing metastream operator for 'int'" );
    v8::Handle<v8::Value> __inargs[] = {
        v8_streamer<int>::to_v8(a),
        v8_streamer<iref<ns::other>>::to_v8(b),
        v8_streamer<int>::to_v8(e)
    };

//  event call
    v8::Local<v8::Value> r__ = ev__->Call(
        LOCAL(iso, _object),
        //_eventobj.IsEmpty() || LOCAL(iso,_eventobj)->IsUndefined() ? LOCAL(iso,_object) : LOCAL(iso,_eventobj),
        3, __inargs);


    if (trycatch__.HasCaught())
        script_handle::throw_js_error(trycatch__, "ns::js::main.evt4(): ");
// gather results

    if (!r__->IsObject()) throw coid::exception("invalid params");
    v8::Local<v8::Object> obj__ = r__->ToObject();

    //return value
    iref<ns::main> _rval_;
    from_v8(r__, _rval_);

    static_assert( CHECK::meta_operator_exists<int>::value, "missing metastream operator for 'int'" );
    from_v8(obj__->Get(v8::symbol("c")), c);

    from_v8(obj__->Get(v8::symbol("d")), d);

    return _rval_;
}

////////////////////////////////////////////////////////////////////////////////
CBK_RET main_js_dispatcher::v8_evback_evt43( const ARGUMENTS& args )
{
    v8::Isolate* iso = args.GetIsolate();

    ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::Local<v8::Object> obj__ = args.Holder();
    if (obj__.IsEmpty() || obj__->InternalFieldCount() == 0)
        return CBK_UNDEFINED;

    v8::Local<v8::Value> intobj__ = obj__->GetInternalField(0);
    if (!intobj__->IsExternal())
        return CBK_UNDEFINED;

    ns::js::main_js_dispatcher* ifc = static_cast<ns::js::main_js_dispatcher*>
        (v8::Handle<v8::External>::Cast(intobj__)->Value());

    v8::Handle<v8::Context> ctx = ifc->context(iso);
    v8::Context::Scope context_scope(ctx);
    v8::TryCatch trycatch__;

    ifc->bind_events(ctx, false, UNDEFINED);
    auto ev__ = LOCAL(iso, ifc->_events[3]);

    if (ifc->_events[3].IsEmpty() || ev__->IsUndefined()) {
        coid::charstr tmp = "Event not available: ";
        tmp << "evt4";
        return (CBK_RET)::js::THROW(iso, &v8::Exception::ReferenceError, tmp);
    }

    v8::Local<v8::Value> largs[3];
    int nargs = args.Length();
    if (nargs > 3)
        nargs = 3;
    for (int i=0; i<nargs; ++i)
        largs[i] = args[i];

    v8::Local<v8::Value> r__ = ev__->Call(
        LOCAL(iso, ifc->_object),
        //ifc->_eventobj.IsEmpty() || LOCAL(iso, ifc->_eventobj)->IsUndefined() ? LOCAL(iso, ifc->_object) : LOCAL(iso, ifc->_eventobj),
        nargs, largs);

#ifdef V8_MAJOR_VERSION
    args.GetReturnValue().Set(r__);
#else
    return ESCAPE(handle_scope__, r__);
#endif
}


////////////////////////////////////////////////////////////////////////////////
CBK_RET main_js_dispatcher::v8log( const ARGUMENTS& args )
{
    v8::Isolate* iso = args.GetIsolate();

    if (args.Length() == 0)
        return CBK_UNDEFINED;

    const void* inst = 0;

    v8::Local<v8::Object> obj__ = args.Holder();
    if (!obj__.IsEmpty() && obj__->InternalFieldCount() > 0) {
        v8::Local<v8::Value> intobj__ = obj__->GetInternalField(0);
        if (intobj__->IsExternal()) {
            ns::js::main_js_dispatcher* ifc = static_cast<ns::js::main_js_dispatcher*>
                (v8::Handle<v8::External>::Cast(intobj__)->Value());

            inst = ifc;
            if (!ifc)
                return (CBK_RET)::js::THROW(iso, &v8::Exception::ReferenceError, "Null interface object in $log");
        }
    }

    ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::String::Utf8Value key(args[0]);

    coid::token tokey(*key, key.length());

    intergen_interface::ifclog_ext(coid::ELogType::None, coid::tokenhash("ns::main"),
        inst, tokey);

    return CBK_UNDEFINED;
}

////////////////////////////////////////////////////////////////////////////////
CBK_RET main_js_dispatcher::v8query_interface( const ARGUMENTS& args )
{
    v8::Isolate* iso = args.GetIsolate();

    if (args.Length() < 1)
        return (CBK_RET)::js::THROW(iso, &v8::Exception::Error, "Interface creator name missing");

    ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::String::Utf8Value key(args[0]);

    typedef v8::Handle<v8::Value> (*fn_get)(const ARGUMENTS&, interface_context*);
    coid::token tokey(*key, key.length());
    fn_get get = reinterpret_cast<fn_get>(
        coid::interface_register::get_interface_creator(tokey));

    if (!get) {
        coid::charstr tmp = "interface creator ";
        tmp << tokey << " not found";
        return (CBK_RET)::js::THROW(iso, v8::Exception::Error, tmp);
    }

    v8::Local<v8::Object> obj__ = args.Holder();
    if (obj__.IsEmpty() || obj__->InternalFieldCount() == 0)
        return CBK_UNDEFINED;

    v8::Local<v8::Value> intobj__ = obj__->GetInternalField(0);
    if (!intobj__->IsExternal())
        return CBK_UNDEFINED;

    ns::js::main_js_dispatcher* ifc = static_cast<ns::js::main_js_dispatcher*>
        (v8::Handle<v8::External>::Cast(intobj__)->Value());

    if (!ifc)
        return (CBK_RET)::js::THROW(iso, &v8::Exception::ReferenceError, "Null interface object in $query_interface");

#ifdef V8_MAJOR_VERSION
    args.GetReturnValue().Set(get(args, ifc));
#else
    return ESCAPE(handle_scope__, get(args, ifc));
#endif
}

////////////////////////////////////////////////////////////////////////////////
CBK_RET main_js_dispatcher::v8query_interface_global( const ARGUMENTS& args )
{
    v8::Isolate* iso = args.GetIsolate();

    if (args.Length() < 1)
        return (CBK_RET)::js::THROW(iso, &v8::Exception::Error, "Interface creator name missing");

    ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::String::Utf8Value key(args[0]);

    typedef v8::Handle<v8::Value> (*fn_get)(const ARGUMENTS&, interface_context*);
    coid::token tokey(*key, key.length());
    fn_get get = reinterpret_cast<fn_get>(
        coid::interface_register::get_interface_creator(tokey));

    if (!get) {
        coid::charstr tmp = "interface creator ";
        tmp << tokey << " not found";
        return (CBK_RET)::js::THROW(iso, v8::Exception::Error, tmp);
    }

#ifdef V8_MAJOR_VERSION
    args.GetReturnValue().Set(get(args, 0));
#else
    return ESCAPE(handle_scope__, get(args, 0));
#endif
}

////////////////////////////////////////////////////////////////////////////////
CBK_RET main_js_dispatcher::v8rebind_events( const ARGUMENTS& args )
{
    v8::Isolate* iso = args.GetIsolate();
    HANDLE_SCOPE(iso, handle_scope__);
    v8::Local<v8::Object> obj__ = args.Holder();
    if (obj__.IsEmpty() || obj__->InternalFieldCount() == 0)
        return CBK_UNDEFINED;

    v8::Local<v8::Value> intobj__ = obj__->GetInternalField(0);
    if (!intobj__->IsExternal())
        return CBK_UNDEFINED;

    ns::js::main_js_dispatcher* ifc = static_cast<ns::js::main_js_dispatcher*>
        (v8::Handle<v8::External>::Cast(intobj__)->Value());

    if (ifc) {
        v8::Local<v8::Value> val;
        if (args.Length() > 0)
            val = args[0];
        ifc->bind_events(ifc->context(iso), true, val);
    }

    return CBK_UNDEFINED;
}

////////////////////////////////////////////////////////////////////////////////
CBK_RET main_js_dispatcher::v8current_global( const ARGUMENTS& args )
{
    v8::Isolate* iso = args.GetIsolate();

    ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::Local<v8::Object> obj__ = args.Holder();
    if (obj__.IsEmpty() || obj__->InternalFieldCount() == 0)
        return CBK_UNDEFINED;

    v8::Local<v8::Value> intobj__ = obj__->GetInternalField(0);
    if (!intobj__->IsExternal())
        return CBK_UNDEFINED;

    ns::js::main_js_dispatcher* ifc = static_cast<ns::js::main_js_dispatcher*>
        (v8::Handle<v8::External>::Cast(intobj__)->Value());

#ifdef V8_MAJOR_VERSION
    args.GetReturnValue().Set(ifc->context(iso)->Global()->GetPrototype());
#else
    return ESCAPE(handle_scope__, ifc->context(iso)->Global()->GetPrototype());
#endif
}

////////////////////////////////////////////////////////////////////////////////
v8::Handle<v8::Object> main_js_dispatcher::create_interface_object( bool make_weak )
{
    v8::Isolate* iso = v8::Isolate::GetCurrent();

    static v8::Persistent<v8::ObjectTemplate> _objtempl;
    if (_objtempl.IsEmpty())
    {
        v8::Local<v8::ObjectTemplate> ot = NEWTYPE(iso, ObjectTemplate);
        ot->SetInternalFieldCount(2);    //ptr and class hash id

        ot->Set(v8::symbol("some_get"), NEWTYPE2(iso, FunctionTemplate, &v8_some_get0));
        ot->Set(v8::symbol("get_a"), NEWTYPE2(iso, FunctionTemplate, &v8_get_a1));
        ot->Set(v8::symbol("set_a"), NEWTYPE2(iso, FunctionTemplate, &v8_set_a2));
        ot->Set(v8::symbol("fun1"), NEWTYPE2(iso, FunctionTemplate, &v8_fun13));
        ot->Set(v8::symbol("fun2"), NEWTYPE2(iso, FunctionTemplate, &v8_fun24));

        ot->Set(v8::symbol("$query_interface"), NEWTYPE2(iso, FunctionTemplate, &v8query_interface));
        ot->Set(v8::symbol("$rebind_events"), NEWTYPE2(iso, FunctionTemplate, &v8rebind_events));
        ot->Set(v8::symbol("$ctx"), NEWTYPE2(iso, FunctionTemplate, &v8current_global));
        ot->Set(v8::symbol("$log"), NEWTYPE2(iso, FunctionTemplate, &v8log));

        //event wrappers for event invocation from outside js
        ot->Set(v8::symbol("evt1"), NEWTYPE2(iso, FunctionTemplate, &v8_evback_evt10));
        ot->Set(v8::symbol("evt2"), NEWTYPE2(iso, FunctionTemplate, &v8_evback_evt21));
        ot->Set(v8::symbol("evt3"), NEWTYPE2(iso, FunctionTemplate, &v8_evback_evt32));
        ot->Set(v8::symbol("evt4"), NEWTYPE2(iso, FunctionTemplate, &v8_evback_evt43));

        PERSISTENT(iso, _objtempl, ot);
    }

    v8::Local<v8::Object> obj = LOCAL(iso, _objtempl)->NewInstance();

    v8::Handle<v8::External> map_ptr = NEWTYPE2(iso, External, this);
    obj->SetInternalField(0, map_ptr);
    v8::Handle<v8::External> hash_ptr = NEWTYPE2(iso, External, (void*)ints(3221005457));
    obj->SetInternalField(1, hash_ptr);

    if (make_weak) {
        PERSISTENT(iso, _object, obj);

#ifdef V8_MAJOR_VERSION
        void* p = this;
        _object.SetWeak(&p, _js_release_callback, v8::WeakCallbackType::kParameter);
        //_context.SetWeak();
#else
        _object.MakeWeak(this, _js_release_callback);
        //_context.MakeWeak(0, _js_release_callback);
#endif
        add_refcount();
    }

    return obj;
}

////////////////////////////////////////////////////////////////////////////////
v8::Handle<v8::Script> main_js_dispatcher::load_script( const coid::token& script, const coid::token& fname )
{
    v8::Local<v8::String> scriptv8 = v8::string_utf8(script);

    // set up an error handler to catch any exceptions the script might throw.
    v8::TryCatch trycatch__;

    v8::Handle<v8::Script> compiled_script = v8::Script::Compile(scriptv8, v8::string_utf8(fname));
    if (trycatch__.HasCaught())
        script_handle::throw_js_error(trycatch__, "ns::js::main::load_script(): ");

    compiled_script->Run();
    if (trycatch__.HasCaught())
        script_handle::throw_js_error(trycatch__, "ns::js::main::load_script(): ");

    return compiled_script;
}

////////////////////////////////////////////////////////////////////////////////
void main_js_dispatcher::bind_events( v8::Handle<v8::Context> context, bool force, v8::Handle<v8::Value> ref )
{
    if (!force && _bound_events)
        return;

    v8::Isolate* iso = v8::Isolate::GetCurrent();

    static token names[] = {
        "evt1",
        "evt2",
        "evt3",
        "evt4",
    };

    HANDLE_SCOPE(iso, handle_scope__);
    v8::Context::Scope context_scope__(context);
    v8::TryCatch trycatch__;
    v8::Local<v8::Object> global;
    bool clear = false;
    if (ref.IsEmpty() || ref->IsUndefined())
        global = context->Global();
    else if (ref->IsNull())
        clear = true;
    else
        global = ref->ToObject();

    for (int i=0; i<4; ++i)
    {
        RESET(_events[i]);

        if (clear)
            continue;

        v8::Local<v8::Value> var = global->Get(v8::string_utf8(names[i]));
        if (var->IsUndefined())
            continue;

        v8::Local<v8::Function> foo = v8::Local<v8::Function>::Cast(var);
        bool failed = trycatch__.HasCaught() || foo->IsUndefined();

        if (!failed)
             PERSISTENT(iso, _events[i], foo);
    }

    _bound_events = true;
}

// --- creators ---

////////////////////////////////////////////////////////////////////////////////
iref<main_js_dispatcher> main_js_dispatcher::create( const script_handle& script, const coid::token& bindname, v8::Handle<v8::Context>* ctx )
{
    v8::Isolate* iso = v8::Isolate::GetCurrent();

    ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::Handle<v8::Context> context;

    // create interface object
    iref<main_js_dispatcher> ifc = ns::main::create(new main_js_dispatcher);
    if (!ifc)
        throw coid::exception() << "failed to create interface object";

    // check if an external context provider is required
    if (script.is_path()) {
        coid::token path = script.str();
        path.cut_right('?', coid::token::cut_trait_remove_sep_default_empty());

        bool ispage = path.begins_with("http://") || path.begins_with("https://") || path.ends_with(".html");
        bool isscript = path.ends_with(".js");

        if (ispage && !isscript) {
            typedef v8::Handle<v8::Context> (*fn_getctx)(const coid::token&, policy_intrusive_base*);

            fn_getctx ctxgetter = reinterpret_cast<fn_getctx>(
                    coid::interface_register::get_interface_creator("~html@system_context_getter2"));

            if (!ctxgetter)
                throw coid::exception() << "unable to acquire the system context creator interface";

            context = ctxgetter(script.str(), ifc.get());
        }
    }

    bool extctx = !context.IsEmpty();

    if (!extctx) {
        if (script.has_context())
            context = script.context();
        else
            context = NEWTYPE(iso, Context);
    }

    if (ctx)
        *ctx = ESCAPE(handle_scope__, context);

    v8::Context::Scope context_scope(context);
    //PERSISTENT(iso, ifc->_context, context);

    if (!extctx && !script.is_context())
    {
        if (!script.has_context()) {
            context->Global()->Set(v8::string_utf8("$include"), NEWTYPE2(iso, FunctionTemplate, &script_handle::js_include)->GetFunction());
            context->Global()->Set(v8::string_utf8("$query_interface"), NEWTYPE2(iso, FunctionTemplate, &main_js_dispatcher::v8query_interface_global)->GetFunction());
            context->Global()->Set(v8::string_utf8("$log"), NEWTYPE2(iso, FunctionTemplate, &main_js_dispatcher::v8log)->GetFunction());
        }

        coid::token script_tok;
        coid::charstr script_tmp;
        if (script.is_path()) {
            coid::bifstream bif (script.str());
            if (!bif.is_open())
                throw coid::exception() << script.str() << " not found";

            script_tmp = script.prefix();

            coid::binstreambuf buf;
            buf.swap(script_tmp);
            buf.transfer_from(bif);
            buf.swap(script_tmp);

            script_tok = script_tmp;
        }
        else if (script.prefix()) {
            script_tmp << script.prefix() << script.str();
            script_tok = script_tmp;
        }
        else {
            script_tok = script.str();
        }

        PERSISTENT(iso, ifc->_object, ifc->create_interface_object(false));
        if (bindname)
            context->Global()->Set(v8::string_utf8(bindname), LOCAL(iso, ifc->_object));

        v8::Handle<v8::Script> compiled_script = load_script(script_tok, script.url());

        //PERSISTENT(iso, ifc->_script, compiled_script);
    }
    else {
        PERSISTENT(iso, ifc->_object, ifc->create_interface_object(false));

        if (bindname)
            context->Global()->Set(v8::string_utf8(bindname), LOCAL(iso, ifc->_object));
    }

    return ifc;
}

////////////////////////////////////////////////////////////////////////////////
///Creator methods for access from JS
v8::Handle<v8::Value> main_js_dispatcher::v8creator_create0( const ARGUMENTS& args, interface_context* ifc )
{
    v8::Isolate* iso = args.GetIsolate();

    if (args.Length() < 1+0 || args.Length() > 1+0) { //fnc name + in/inout arguments
        coid::charstr tmp = "Wrong number of arguments in ";
        tmp << "create";
        ::js::THROW(iso, &v8::Exception::Error, tmp);
        return UNDEFINED;
    }

    ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::Local<v8::Object> obj__ = args.Holder();

    //ns::js::main_js_dispatcher* ifc = static_cast<ns::js::main_js_dispatcher*>
    //    (v8::Handle<v8::External>::Cast(obj__->GetInternalField(0))->Value());

    v8::Local<v8::Context> ctx = ifc && !ifc->_object.IsEmpty()
        ? ifc->context(iso)
        : CUR_CONTEXT(iso);
    v8::Context::Scope context_scope(ctx);

    //stream the arguments in
    THREAD_SINGLETON(v8_streamer_context).reset();

    //invoke
    iref<main_js_dispatcher> nifc = ns::main::create(new main_js_dispatcher);
    //if (nifc)
    //    PERSISTENT(iso, nifc->_context, ctx);//ifc->_context);

    //stream out
    v8::Handle<v8::Value> r__ = nifc ? v8::Handle<v8::Value>(nifc->create_interface_object(true)) : NULLv8(iso);
    
    return ESCAPE(handle_scope__, r__);
}

////////////////////////////////////////////////////////////////////////////////
iref<main_js_dispatcher> main_js_dispatcher::create_special( const script_handle& script, int a, iref<ns::other> b, int& c, iref<ns::other>& d, int e, const coid::token& bindname, v8::Handle<v8::Context>* ctx )
{
    v8::Isolate* iso = v8::Isolate::GetCurrent();

    ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::Handle<v8::Context> context;

    // create interface object
    iref<main_js_dispatcher> ifc = ns::main::create_special(new main_js_dispatcher, a, b, c, d, e);
    if (!ifc)
        throw coid::exception() << "failed to create interface object";

    // check if an external context provider is required
    if (script.is_path()) {
        coid::token path = script.str();
        path.cut_right('?', coid::token::cut_trait_remove_sep_default_empty());

        bool ispage = path.begins_with("http://") || path.begins_with("https://") || path.ends_with(".html");
        bool isscript = path.ends_with(".js");

        if (ispage && !isscript) {
            typedef v8::Handle<v8::Context> (*fn_getctx)(const coid::token&, policy_intrusive_base*);

            fn_getctx ctxgetter = reinterpret_cast<fn_getctx>(
                    coid::interface_register::get_interface_creator("~html@system_context_getter2"));

            if (!ctxgetter)
                throw coid::exception() << "unable to acquire the system context creator interface";

            context = ctxgetter(script.str(), ifc.get());
        }
    }

    bool extctx = !context.IsEmpty();

    if (!extctx) {
        if (script.has_context())
            context = script.context();
        else
            context = NEWTYPE(iso, Context);
    }

    if (ctx)
        *ctx = ESCAPE(handle_scope__, context);

    v8::Context::Scope context_scope(context);
    //PERSISTENT(iso, ifc->_context, context);

    if (!extctx && !script.is_context())
    {
        if (!script.has_context()) {
            context->Global()->Set(v8::string_utf8("$include"), NEWTYPE2(iso, FunctionTemplate, &script_handle::js_include)->GetFunction());
            context->Global()->Set(v8::string_utf8("$query_interface"), NEWTYPE2(iso, FunctionTemplate, &main_js_dispatcher::v8query_interface_global)->GetFunction());
            context->Global()->Set(v8::string_utf8("$log"), NEWTYPE2(iso, FunctionTemplate, &main_js_dispatcher::v8log)->GetFunction());
        }

        coid::token script_tok;
        coid::charstr script_tmp;
        if (script.is_path()) {
            coid::bifstream bif (script.str());
            if (!bif.is_open())
                throw coid::exception() << script.str() << " not found";

            script_tmp = script.prefix();

            coid::binstreambuf buf;
            buf.swap(script_tmp);
            buf.transfer_from(bif);
            buf.swap(script_tmp);

            script_tok = script_tmp;
        }
        else if (script.prefix()) {
            script_tmp << script.prefix() << script.str();
            script_tok = script_tmp;
        }
        else {
            script_tok = script.str();
        }

        PERSISTENT(iso, ifc->_object, ifc->create_interface_object(false));
        if (bindname)
            context->Global()->Set(v8::string_utf8(bindname), LOCAL(iso, ifc->_object));

        v8::Handle<v8::Script> compiled_script = load_script(script_tok, script.url());

        //PERSISTENT(iso, ifc->_script, compiled_script);
    }
    else {
        PERSISTENT(iso, ifc->_object, ifc->create_interface_object(false));

        if (bindname)
            context->Global()->Set(v8::string_utf8(bindname), LOCAL(iso, ifc->_object));
    }

    return ifc;
}

////////////////////////////////////////////////////////////////////////////////
///Creator methods for access from JS
v8::Handle<v8::Value> main_js_dispatcher::v8creator_create_special1( const ARGUMENTS& args, interface_context* ifc )
{
    v8::Isolate* iso = args.GetIsolate();

    if (args.Length() < 1+2 || args.Length() > 1+3) { //fnc name + in/inout arguments
        coid::charstr tmp = "Wrong number of arguments in ";
        tmp << "create_special";
        ::js::THROW(iso, &v8::Exception::Error, tmp);
        return UNDEFINED;
    }

    ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::Local<v8::Object> obj__ = args.Holder();

    //ns::js::main_js_dispatcher* ifc = static_cast<ns::js::main_js_dispatcher*>
    //    (v8::Handle<v8::External>::Cast(obj__->GetInternalField(0))->Value());

    v8::Local<v8::Context> ctx = ifc && !ifc->_object.IsEmpty()
        ? ifc->context(iso)
        : CUR_CONTEXT(iso);
    v8::Context::Scope context_scope(ctx);

    //stream the arguments in
    THREAD_SINGLETON(v8_streamer_context).reset();

    static_assert(CHECK::meta_operator_exists<int>::value, "missing metastream operator for 'int'");
    static_assert(CHECK::meta_operator_exists<int>::value, "missing metastream operator for 'int'");
    threadcached<int> a;
    from_v8(args[1+0], a);

    threadcached<iref<ns::other>> b;
    from_v8(args[1+1], b);

    threadcached<int> e;
    if (1 + 2 < args.Length())
        from_v8(args[1+2], e);
    else
        e = -1;

    //invoke
    int c;

    iref<ns::other> d;

    iref<main_js_dispatcher> nifc = ns::main::create_special(new main_js_dispatcher, a, b, c, d, e);
    //if (nifc)
    //    PERSISTENT(iso, nifc->_context, ctx);//ifc->_context);

    //stream out
    v8::Handle<v8::Object> r__ = NEWTYPE(iso, Object);
    r__->Set(v8::symbol("$ret"), nifc ? v8::Handle<v8::Value>(nifc->create_interface_object(true)) : NULLv8(iso));

    static_assert(CHECK::meta_operator_exists<int>::value, "missing metastream operator for 'int'");
    r__->Set(v8::symbol("c"), to_v8(c));

    r__->Set(v8::symbol("d"), to_v8(d));
    
    return ESCAPE(handle_scope__, r__);
}

////////////////////////////////////////////////////////////////////////////////
iref<main_js_dispatcher> main_js_dispatcher::create_wp( const script_handle& script, int a, int& b, int& c, int d, const coid::token& bindname, v8::Handle<v8::Context>* ctx )
{
    v8::Isolate* iso = v8::Isolate::GetCurrent();

    ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::Handle<v8::Context> context;

    // create interface object
    iref<main_js_dispatcher> ifc = ns::main::create_wp(new main_js_dispatcher, a, b, c, d);
    if (!ifc)
        throw coid::exception() << "failed to create interface object";

    // check if an external context provider is required
    if (script.is_path()) {
        coid::token path = script.str();
        path.cut_right('?', coid::token::cut_trait_remove_sep_default_empty());

        bool ispage = path.begins_with("http://") || path.begins_with("https://") || path.ends_with(".html");
        bool isscript = path.ends_with(".js");

        if (ispage && !isscript) {
            typedef v8::Handle<v8::Context> (*fn_getctx)(const coid::token&, policy_intrusive_base*);

            fn_getctx ctxgetter = reinterpret_cast<fn_getctx>(
                    coid::interface_register::get_interface_creator("~html@system_context_getter2"));

            if (!ctxgetter)
                throw coid::exception() << "unable to acquire the system context creator interface";

            context = ctxgetter(script.str(), ifc.get());
        }
    }

    bool extctx = !context.IsEmpty();

    if (!extctx) {
        if (script.has_context())
            context = script.context();
        else
            context = NEWTYPE(iso, Context);
    }

    if (ctx)
        *ctx = ESCAPE(handle_scope__, context);

    v8::Context::Scope context_scope(context);
    //PERSISTENT(iso, ifc->_context, context);

    if (!extctx && !script.is_context())
    {
        if (!script.has_context()) {
            context->Global()->Set(v8::string_utf8("$include"), NEWTYPE2(iso, FunctionTemplate, &script_handle::js_include)->GetFunction());
            context->Global()->Set(v8::string_utf8("$query_interface"), NEWTYPE2(iso, FunctionTemplate, &main_js_dispatcher::v8query_interface_global)->GetFunction());
            context->Global()->Set(v8::string_utf8("$log"), NEWTYPE2(iso, FunctionTemplate, &main_js_dispatcher::v8log)->GetFunction());
        }

        coid::token script_tok;
        coid::charstr script_tmp;
        if (script.is_path()) {
            coid::bifstream bif (script.str());
            if (!bif.is_open())
                throw coid::exception() << script.str() << " not found";

            script_tmp = script.prefix();

            coid::binstreambuf buf;
            buf.swap(script_tmp);
            buf.transfer_from(bif);
            buf.swap(script_tmp);

            script_tok = script_tmp;
        }
        else if (script.prefix()) {
            script_tmp << script.prefix() << script.str();
            script_tok = script_tmp;
        }
        else {
            script_tok = script.str();
        }

        PERSISTENT(iso, ifc->_object, ifc->create_interface_object(false));
        if (bindname)
            context->Global()->Set(v8::string_utf8(bindname), LOCAL(iso, ifc->_object));

        v8::Handle<v8::Script> compiled_script = load_script(script_tok, script.url());

        //PERSISTENT(iso, ifc->_script, compiled_script);
    }
    else {
        PERSISTENT(iso, ifc->_object, ifc->create_interface_object(false));

        if (bindname)
            context->Global()->Set(v8::string_utf8(bindname), LOCAL(iso, ifc->_object));
    }

    return ifc;
}

////////////////////////////////////////////////////////////////////////////////
///Creator methods for access from JS
v8::Handle<v8::Value> main_js_dispatcher::v8creator_create_wp2( const ARGUMENTS& args, interface_context* ifc )
{
    v8::Isolate* iso = args.GetIsolate();

    if (args.Length() < 1+2 || args.Length() > 1+3) { //fnc name + in/inout arguments
        coid::charstr tmp = "Wrong number of arguments in ";
        tmp << "create_wp";
        ::js::THROW(iso, &v8::Exception::Error, tmp);
        return UNDEFINED;
    }

    ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::Local<v8::Object> obj__ = args.Holder();

    //ns::js::main_js_dispatcher* ifc = static_cast<ns::js::main_js_dispatcher*>
    //    (v8::Handle<v8::External>::Cast(obj__->GetInternalField(0))->Value());

    v8::Local<v8::Context> ctx = ifc && !ifc->_object.IsEmpty()
        ? ifc->context(iso)
        : CUR_CONTEXT(iso);
    v8::Context::Scope context_scope(ctx);

    //stream the arguments in
    THREAD_SINGLETON(v8_streamer_context).reset();

    static_assert(CHECK::meta_operator_exists<int>::value, "missing metastream operator for 'int'");
    static_assert(CHECK::meta_operator_exists<int>::value, "missing metastream operator for 'int'");
    static_assert(CHECK::meta_operator_exists<int>::value, "missing metastream operator for 'int'");
    threadcached<int> a;
    from_v8(args[1+0], a);

    threadcached<int> b;
    from_v8(args[1+1], b);

    threadcached<int> d;
    if (1 + 2 < args.Length())
        from_v8(args[1+2], d);
    else
        d = -1;

    //invoke
    int c;

    iref<main_js_dispatcher> nifc = ns::main::create_wp(new main_js_dispatcher, a, b, c, d);
    //if (nifc)
    //    PERSISTENT(iso, nifc->_context, ctx);//ifc->_context);

    //stream out
    v8::Handle<v8::Object> r__ = NEWTYPE(iso, Object);
    r__->Set(v8::symbol("$ret"), nifc ? v8::Handle<v8::Value>(nifc->create_interface_object(true)) : NULLv8(iso));

    static_assert(CHECK::meta_operator_exists<int>::value, "missing metastream operator for 'int'");
    r__->Set(v8::symbol("b"), to_v8(b));

    static_assert(CHECK::meta_operator_exists<int>::value, "missing metastream operator for 'int'");
    r__->Set(v8::symbol("c"), to_v8(c));
    
    return ESCAPE(handle_scope__, r__);
}

////////////////////////////////////////////////////////////////////////////////
///Create JS wrapper from an existing interface object
v8::Handle<v8::Value> create_wrapper_main( ::ns::main* orig, v8::Handle<v8::Context> context )
{
    v8::Isolate* iso = v8::Isolate::GetCurrent();

    // check that the orig points to an object
    if (!orig) return NULLv8(iso);

    if (context.IsEmpty()) {
        context = CUR_CONTEXT(iso);
    }

    v8::Context::Scope context_scope(context);
    ESCAPABLE_SCOPE(iso, scope);

    iref<ns::js::main_js_dispatcher> ifc;
    v8::Handle<v8::Object> obj;

    if (orig->intergen_backend() == intergen_interface::IFC_BACKEND_JS)
        obj = LOCAL(iso, static_cast<main_js_dispatcher*>(orig)->_object);

    if (obj.IsEmpty()) {
        // create interface object
        ifc.create(new ns::js::main_js_dispatcher(static_cast<::ns::main*>(orig)));

        obj = ifc->create_interface_object(true);
    }

    return ESCAPE(scope, obj);
}

////////////////////////////////////////////////////////////////////////////////
static void register_binders_for_main( bool on )
{
    interface_register::register_interface_creator(
        "ns::js::main.create@creator",
        on ? (void*)&main_js_dispatcher::create : nullptr);
    interface_register::register_interface_creator(
        "ns::js::main.create",
        on ? (void*)&main_js_dispatcher::v8creator_create0 : nullptr);
    interface_register::register_interface_creator(
        "ns::js::main.create_special@creator",
        on ? (void*)&main_js_dispatcher::create_special : nullptr);
    interface_register::register_interface_creator(
        "ns::js::main.create_special",
        on ? (void*)&main_js_dispatcher::v8creator_create_special1 : nullptr);
    interface_register::register_interface_creator(
        "ns::js::main.create_wp@creator",
        on ? (void*)&main_js_dispatcher::create_wp : nullptr);
    interface_register::register_interface_creator(
        "ns::js::main.create_wp",
        on ? (void*)&main_js_dispatcher::v8creator_create_wp2 : nullptr);
    interface_register::register_interface_creator(
        "ns::js::main@wrapper",
        on ? (void*)&create_wrapper_main : nullptr);

}

//auto-register the bind function
LOCAL_SINGLETON_DEF(ifc_autoregger) main_autoregger = new ifc_autoregger(&register_binders_for_main);


void* force_register_js_main() {
    LOCAL_SINGLETON_DEF(ifc_autoregger) autoregger = new ifc_autoregger(&register_binders_for_main);
    return autoregger.get();
}

} //namespace js
} //namespace ns

////////////////////////////////////////////////////////////////////////////////
///Create JS wrapper from an existing interface object
v8::Handle<v8::Value> js_ns_main_create_wrapper( const iref<ns::main>& orig, v8::Handle<v8::Context> context )
{
    return ns::js::create_wrapper_main(orig.get(), context);
}
