
//@file  interface dispatcher generated by intergen v8
//See LICENSE file for copyright and license information

#include "ifc/emptyface.h"
#include "ifc/thingface.h"
#include "ifc/ifc_int.h"
#include "ifc/ifc_ext.h"
#include "ifc/ifc_ext2.h"
#include "test.hpp"

#include <comm/ref.h>
#include <comm/singleton.h>
#include <comm/binstring.h>
#include <type_traits>

static_assert(intergen_interface::VERSION == 8, "interface must be rebuilt with a different intergen version");

using namespace coid;

static_assert( std::is_base_of<policy_intrusive_base, ::n1::n2::empty_thing>::value, "class 'empty_thing' must be derived from policy_intrusive_base");

////////////////////////////////////////////////////////////////////////////////
// interface ifc1::ifc2::emptyface of class empty_thing

namespace ifc1 {
namespace ifc2 {

///
class emptyface_dispatcher : public emptyface
{
    friend class emptyface;

    inline static const meta::arg get2_1args[] = {
       { "p", "void*", "void", "", "void", "", "", "", "", nullptr, false, true, false, false, false, false, false, true, false, false, false, false, "" },
    };
    inline static const meta::method creators[] = {
        { "get", true, false, true, false, false, false, true, false, false, false, true, false, false, false, 0, 0, 0, nullptr },
        { "get2", true, false, true, false, false, false, true, false, false, false, true, false, false, false, 1, 1, 0, get2_1args },
    };
    inline static const meta::method* methods = nullptr;
    inline static const meta::method* events = nullptr;
    inline static const meta::interface ifc_meta = {
        "emptyface", // interface name
        { 0 }, // namespaces
        "emptyface.h", // header file
        "iref<n1::n2::empty_thing>", // storage
        "", // base class name
        { 0 }, // base class namespaces
        2, 0, 0, // num. creators/methods/events
        creators, methods, events
    };

private:

    inline static coid::binstring* _capture = 0;
    inline static uint16 _instid = 0xffffU;
    inline static ifn_t* _vtable1 = 0;
    inline static ifn_t* _vtable2 = 0;

    static ifn_t* get_vtable()
    {
        if (_vtable1) return _vtable1;

        _vtable1 = new ifn_t[0];
        return _vtable1;
    }

    #define VT_CALL2(R,F,I) ((*reinterpret_cast<policy_intrusive_base*>(this)).*(reinterpret_cast<R(policy_intrusive_base::*)F>(_vtable1[I])))


    static ifn_t* get_vtable_intercept()
    {
        if (_vtable2) return _vtable2;
        ifn_t* vtable1 = get_vtable();

        _vtable2 = new ifn_t[0];
        return _vtable2;
    }


protected:

    COIDNEWDELETE(emptyface_dispatcher);

    emptyface_dispatcher() {
    }

    virtual ~emptyface_dispatcher() {
    }

    bool intergen_bind_capture( coid::binstring* capture, uint instid ) override
    {
        if (instid >= 0xffU)
            return false;

        _instid = uint16(instid << 8U);
        _capture = capture;
        _vtable = _capture ? get_vtable_intercept() : get_vtable();
        return true;
    }

    void intergen_capture_dispatch( uint mid, coid::binstring& bin ) override
    {
        switch(mid) {
        case UMAX32:
        default: throw coid::exception("unknown method id in emptyface capture dispatcher");
        }
    }

    static iref<emptyface> _generic_interface_creator(::n1::n2::empty_thing* host, emptyface* __here__)
    {
        iref<emptyface> rval;
        //a passive interface (no events)
        emptyface_dispatcher* dispatcher = __here__
            ? static_cast<emptyface_dispatcher*>(__here__)
            : new emptyface_dispatcher;
        rval.create(dispatcher);

        dispatcher->set_host(host, 0, 0);

        return rval;
    }

public:

    // creator methods

    static iref<emptyface> get( emptyface* __here__ )
    {
        iref<::n1::n2::empty_thing> __host__ = ::n1::n2::empty_thing::_get_thing();
        if (!__host__)
            return 0;
        return _generic_interface_creator(__host__.get(), __here__);
    }

    static iref<emptyface> get2( emptyface* __here__, void* p )
    {
        iref<::n1::n2::empty_thing> __host__ = ::n1::n2::empty_thing::_get2(p);
        if (!__host__)
            return 0;
        return _generic_interface_creator(__host__.get(), __here__);
    }

    ///Register interface creators in the global registry
    static void register_interfaces( bool on )
    {
        interface_register::register_interface_creator(
            "ifc1::ifc2::emptyface@wrapper",
            on ? (void*)&_generic_interface_creator : nullptr);

        interface_register::register_interface_creator(
            "ifc1::ifc2::emptyface.get@73279724",
            on ? (void*)&get : nullptr);
        interface_register::register_interface_creator(
            "ifc1::ifc2::emptyface.get2@73279724",
            on ? (void*)&get2 : nullptr);
    }
};


bool emptyface::set_host(policy_intrusive_base* host__, intergen_interface* client__, iref<emptyface>* pout)
{
    _host = host__;
    _vtable = emptyface_dispatcher::get_vtable();
    return true;
}

//auto-register the available interface creators
LOCAL_SINGLETON_DEF(ifc_autoregger) emptyface_autoregger = new ifc_autoregger(&emptyface_dispatcher::register_interfaces);

void* force_register_emptyface() {
    LOCAL_SINGLETON_DEF(ifc_autoregger) autoregger = new ifc_autoregger(&emptyface_dispatcher::register_interfaces);
    return autoregger.get();
}

} //namespace ifc1
} //namespace ifc2

static_assert( std::is_base_of<policy_intrusive_base, ::n1::n2::thing>::value, "class 'thing' must be derived from policy_intrusive_base");

////////////////////////////////////////////////////////////////////////////////
// interface ifc1::ifc2::thingface of class thing

namespace ifc1 {
namespace ifc2 {

///
class thingface_dispatcher : public thingface
{
    friend class thingface;

    inline static const meta::arg hallo_2args[] = {
       { "a", "int", "int", "", "int", "", "", "", "", &meta::stream_op<int>::fn, false, false, false, false, false, false, false, true, false, false, false, false, "some argument \" test escaping" },
       { "b", "const coid::token&", "coid::token", "coid", "token", "", "", "", "", &meta::stream_op<coid::token>::fn, false, false, true, false, false, false, false, true, false, false, false, false, "" },
       { "c", "coid::charstr&", "coid::charstr", "coid", "charstr", "", "", "", "", &meta::stream_op<coid::charstr>::fn, false, false, true, false, false, false, false, false, true, false, false, false, "" },
    };
    inline static const meta::arg fallo_4args[] = {
       { "b", "bool", "bool", "", "bool", "", "", "", "", &meta::stream_op<bool>::fn, false, false, false, false, false, false, false, true, false, false, false, false, "" },
       { "str", "const char*", "const char*", "", "const char*", "", "", "", "", nullptr, true, true, false, false, false, false, false, true, false, false, false, false, "" },
    };
    inline static const meta::arg loo_5args[] = {
       { "a", "bool", "bool", "", "bool", "", "", "", "", &meta::stream_op<bool>::fn, false, false, false, false, false, false, false, true, false, false, false, false, "" },
       { "b", "int", "int", "", "int", "", "", "", "", &meta::stream_op<int>::fn, false, false, false, false, false, false, false, true, false, false, false, false, "" },
    };
    inline static const meta::arg operator_const_6args[] = {
       { "key", "const char*", "const char*", "", "const char*", "", "", "", "", nullptr, true, true, false, false, false, false, false, true, false, false, false, false, "" },
    };
    inline static const meta::arg operator_nonconst_7args[] = {
       { "key", "const char*", "const char*", "", "const char*", "", "", "", "", nullptr, true, true, false, false, false, false, false, true, false, false, false, false, "" },
       { "value", "double", "double", "", "double", "", "", "", "", &meta::stream_op<double>::fn, false, false, false, false, false, false, false, true, false, false, false, false, "" },
    };
    inline static const meta::arg inout_8args[] = {
       { "par", "test*&", "test*", "", "test*", "", "", "", "", &meta::stream_op<test*>::fn, false, false, true, false, false, false, false, true, true, false, false, false, "" },
    };
    inline static const meta::arg nested_9args[] = {
       { "stuff", "const coid::dynarray<bt::base>&", "coid::dynarray<bt::base>", "coid", "dynarray<bt::base>", "", "", "", "", nullptr, false, false, true, false, false, false, false, true, false, false, false, false, "" },
    };
    inline static const meta::method creators[] = {
        { "get", true, false, true, false, false, false, false, false, false, false, true, false, false, false, 0, 0, 0, nullptr },
    };
    inline static const meta::method methods[] = {
        { "destroy", false, false, false, false, false, false, false, false, false, true, false, false, false, false, 0, 0, 0, nullptr },
        { "hallo", false, false, false, false, false, false, false, false, false, false, true, false, false, false, 3, 2, 1, hallo_2args },
        { "noargs", false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, 0, nullptr },
        { "fallo", false, false, false, false, false, false, false, false, false, false, true, false, false, false, 2, 2, 0, fallo_4args },
        { "loo", false, false, false, false, false, false, false, false, false, false, false, false, false, false, 2, 2, 0, loo_5args },
        { "operator()", false, false, false, false, true, true, false, false, false, false, true, false, false, false, 1, 1, 0, operator_const_6args },
        { "operator()", false, false, false, false, false, true, false, false, false, false, false, false, false, false, 2, 2, 0, operator_nonconst_7args },
        { "inout", false, false, false, false, false, false, false, false, false, false, true, false, false, false, 1, 1, 1, inout_8args },
        { "nested", false, false, false, false, false, false, true, false, false, false, false, false, false, false, 1, 1, 0, nested_9args },
    };
    inline static const meta::arg boo_0args[] = {
       { "key", "const char*", "const char*", "", "const char*", "", "", "", "", nullptr, true, true, false, false, false, false, false, true, false, false, false, false, "" },
       { "some", "int", "int", "", "int", "", "", "", "", &meta::stream_op<int>::fn, false, false, false, false, false, false, false, true, false, false, false, false, "" },
    };
    inline static const meta::method events[] = {
        { "boo", false, false, false, false, false, false, false, false, false, false, false, false, false, false, 2, 2, 0, boo_0args },
        { "body", false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, 0, nullptr },
        { "strbody", false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, 0, nullptr },
    };
    inline static const meta::interface ifc_meta = {
        "thingface", // interface name
        { 0 }, // namespaces
        "thingface.h", // header file
        "iref<n1::n2::thing>", // storage
        "", // base class name
        { 0 }, // base class namespaces
        1, 9, 3, // num. creators/methods/events
        creators, methods, events
    };

private:

    inline static coid::binstring* _capture = 0;
    inline static uint16 _instid = 0xffffU;
    inline static ifn_t* _vtable1 = 0;
    inline static ifn_t* _vtable2 = 0;

    static ifn_t* get_vtable()
    {
        if (_vtable1) return _vtable1;

        _vtable1 = new ifn_t[9];
        _vtable1[0] = reinterpret_cast<ifn_t>(static_cast<void(policy_intrusive_base::*)()>(&::n1::n2::thing::destroy));
        _vtable1[1] = reinterpret_cast<ifn_t>(static_cast<int(policy_intrusive_base::*)(int,const coid::token&,coid::charstr&)>(&::n1::n2::thing::hallo));
        _vtable1[2] = reinterpret_cast<ifn_t>(static_cast<void(policy_intrusive_base::*)()>(&::n1::n2::thing::noargs));
        _vtable1[3] = reinterpret_cast<ifn_t>(static_cast<coid::charstr(policy_intrusive_base::*)(bool,const char*)>(&::n1::n2::thing::fallo));
        _vtable1[4] = reinterpret_cast<ifn_t>(static_cast<void(policy_intrusive_base::*)(bool,int)>(&::n1::n2::thing::loo));
        _vtable1[5] = reinterpret_cast<ifn_t>(static_cast<double(policy_intrusive_base::*)(const char*)const>(&::n1::n2::thing::operator()));
        _vtable1[6] = reinterpret_cast<ifn_t>(static_cast<void(policy_intrusive_base::*)(const char*,double)>(&::n1::n2::thing::operator()));
        _vtable1[7] = reinterpret_cast<ifn_t>(static_cast<void(policy_intrusive_base::*)(test*&)>(&::n1::n2::thing::inout));
        _vtable1[8] = reinterpret_cast<ifn_t>(static_cast<void(policy_intrusive_base::*)(const coid::dynarray<bt::base>&)>(&::n1::n2::thing::nested));
        return _vtable1;
    }

    #define VT_CALL2(R,F,I) ((*reinterpret_cast<policy_intrusive_base*>(this)).*(reinterpret_cast<R(policy_intrusive_base::*)F>(_vtable1[I])))


    static ifn_t* get_vtable_intercept()
    {
        if (_vtable2) return _vtable2;
        ifn_t* vtable1 = get_vtable();

        _vtable2 = new ifn_t[9];
        _vtable2[0] = vtable1[0];
        _vtable2[1] = vtable1[1];
        _vtable2[2] = vtable1[2];
        _vtable2[3] = vtable1[3];
        _vtable2[4] = vtable1[4];
        _vtable2[5] = vtable1[5];
        _vtable2[6] = vtable1[6];
        _vtable2[7] = vtable1[7];
        _vtable2[8] = vtable1[8];
        return _vtable2;
    }


protected:

    COIDNEWDELETE(thingface_dispatcher);

    thingface_dispatcher() {
    }

    virtual ~thingface_dispatcher() {
    }

    bool intergen_bind_capture( coid::binstring* capture, uint instid ) override
    {
        if (instid >= 0xffU)
            return false;

        _instid = uint16(instid << 8U);
        _capture = capture;
        _vtable = _capture ? get_vtable_intercept() : get_vtable();
        return true;
    }

    void intergen_capture_dispatch( uint mid, coid::binstring& bin ) override
    {
        switch(mid) {
        case UMAX32:
        default: throw coid::exception("unknown method id in thingface capture dispatcher");
        }
    }

    static iref<thingface> _generic_interface_creator(::n1::n2::thing* host, thingface* __here__)
    {
        iref<thingface> rval;
        //an active interface (with events)
        if (host->_ifc && !__here__)
            rval = intergen_active_interface(host);

        if (rval.is_empty()) {
            //interface not taken from host
            thingface_dispatcher* dispatcher = __here__
                ? static_cast<thingface_dispatcher*>(__here__)
                : new thingface_dispatcher;
            rval.create(dispatcher);

            dispatcher->set_host(host, rval.get(), __here__ ? 0 : &rval);
        }

        return rval;
    }

public:

    // creator methods

    static iref<thingface> get( thingface* __here__ )
    {
        iref<::n1::n2::thing> __host__ = ::n1::n2::thing::get_thing();
        if (!__host__)
            return 0;
        return _generic_interface_creator(__host__.get(), __here__);
    }

    ///Register interface creators in the global registry
    static void register_interfaces( bool on )
    {
        interface_register::register_interface_creator(
            "ifc1::ifc2::thingface@wrapper",
            on ? (void*)&_generic_interface_creator : nullptr);

        interface_register::register_interface_creator(
            "ifc1::ifc2::thingface.get@2881115501",
            on ? (void*)&get : nullptr);
    }
};


iref<thingface> thingface::intergen_active_interface(::n1::n2::thing* host)
{
    coid::comm_mutex& mx = share_lock();

    GUARDTHIS(mx);
    iref<thingface> rval;
    rval.add_refcount(static_cast<thingface*>(host->_ifc.get()));

    return rval;
}

bool thingface::assign_safe(intergen_interface* client__, iref<thingface>* pout)
{
    //try assigning to the host (MT guard)
    // if that fails, the interface will be passive (no events)

    ::n1::n2::thing* hostptr = host<::n1::n2::thing>();
    if (!hostptr)
        return false;

    coid::clean_ptr<intergen_interface>& ifcvar = hostptr->_ifc;
    coid::comm_mutex& mx = share_lock();
    if (ifcvar == client__)
        return true;

    GUARDTHIS(mx);
    //assign only if nobody assigned before us
    bool succ = !ifcvar || !client__;
    if (succ) {
        ifcvar = client__;
        _cleaner = client__ ? &_cleaner_callback : 0;
    }
    else if (pout)
        pout->add_refcount(static_cast<thingface*>(ifcvar.get()));

    return succ;
}

bool thingface::set_host(policy_intrusive_base* host__, intergen_interface* client__, iref<thingface>* pout)
{
    _host = host__;
    _vtable = thingface_dispatcher::get_vtable();

    return assign_safe(client__, pout);
}

//auto-register the available interface creators
LOCAL_SINGLETON_DEF(ifc_autoregger) thingface_autoregger = new ifc_autoregger(&thingface_dispatcher::register_interfaces);

void* force_register_thingface() {
    LOCAL_SINGLETON_DEF(ifc_autoregger) autoregger = new ifc_autoregger(&thingface_dispatcher::register_interfaces);
    return autoregger.get();
}

} //namespace ifc1
} //namespace ifc2

// events

namespace n1 {
namespace n2 {

void thing::boo( const char* key, int some )
{
    if (!_ifc)
        throw coid::exception("Client not connected! (boo)");
    else
        return _ifc->iface<ifc1::ifc2::thingface>()->boo(key, some);
}

const char* thing::body()
{
    if (!_ifc)
        { return "string"; }
    else
        return _ifc->iface<ifc1::ifc2::thingface>()->body();
}

coid::charstr thing::strbody()
{
    if (!_ifc)
        { return "value"; }
    else
        return _ifc->iface<ifc1::ifc2::thingface>()->strbody();
}

} //namespace n1
} //namespace n2

////////////////////////////////////////////////////////////////////////////////
// interface ns::ifc_int of class thing

namespace ns {

///
class ifc_int_dispatcher : public ifc_int
{
    friend class ifc_int;

    inline static const meta::arg hallo_2args[] = {
       { "a", "int", "int", "", "int", "", "", "", "", &meta::stream_op<int>::fn, false, false, false, false, false, false, false, true, false, false, false, false, "some argument \" test escaping" },
       { "b", "const coid::token&", "coid::token", "coid", "token", "", "", "", "", &meta::stream_op<coid::token>::fn, false, false, true, false, false, false, false, true, false, false, false, false, "" },
       { "c", "coid::charstr&", "coid::charstr", "coid", "charstr", "", "", "", "", &meta::stream_op<coid::charstr>::fn, false, false, true, false, false, false, false, false, true, false, false, false, "" },
    };
    inline static const meta::arg fallo_4args[] = {
       { "b", "bool", "bool", "", "bool", "", "", "", "", &meta::stream_op<bool>::fn, false, false, false, false, false, false, false, true, false, false, false, false, "" },
       { "str", "const char*", "const char*", "", "const char*", "", "", "", "", nullptr, true, true, false, false, false, false, false, true, false, false, false, false, "" },
    };
    inline static const meta::arg loo_5args[] = {
       { "a", "bool", "bool", "", "bool", "", "", "", "", &meta::stream_op<bool>::fn, false, false, false, false, false, false, false, true, false, false, false, false, "" },
       { "b", "int", "int", "", "int", "", "", "", "", &meta::stream_op<int>::fn, false, false, false, false, false, false, false, true, false, false, false, false, "" },
    };
    inline static const meta::arg operator_const_6args[] = {
       { "key", "const char*", "const char*", "", "const char*", "", "", "", "", nullptr, true, true, false, false, false, false, false, true, false, false, false, false, "" },
    };
    inline static const meta::arg operator_nonconst_7args[] = {
       { "key", "const char*", "const char*", "", "const char*", "", "", "", "", nullptr, true, true, false, false, false, false, false, true, false, false, false, false, "" },
       { "value", "double", "double", "", "double", "", "", "", "", &meta::stream_op<double>::fn, false, false, false, false, false, false, false, true, false, false, false, false, "" },
    };
    inline static const meta::arg inout_8args[] = {
       { "par", "test*&", "test*", "", "test*", "", "", "", "", &meta::stream_op<test*>::fn, false, false, true, false, false, false, false, true, true, false, false, false, "" },
    };
    inline static const meta::arg nested_9args[] = {
       { "stuff", "const coid::dynarray<bt::base>&", "coid::dynarray<bt::base>", "coid", "dynarray<bt::base>", "", "", "", "", nullptr, false, false, true, false, false, false, false, true, false, false, false, false, "" },
    };
    inline static const meta::method creators[] = {
        { "get", true, false, true, false, false, false, false, false, false, false, true, false, false, true, 0, 0, 0, nullptr },
    };
    inline static const meta::method methods[] = {
        { "destroy", false, false, false, false, false, false, false, false, false, true, false, false, false, true, 0, 0, 0, nullptr },
        { "hallo", false, false, false, false, false, false, false, false, false, false, true, false, false, true, 3, 2, 1, hallo_2args },
        { "noargs", false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, 0, nullptr },
        { "fallo", false, false, false, false, false, false, false, false, false, false, true, false, false, true, 2, 2, 0, fallo_4args },
        { "loo", false, false, false, false, false, false, false, false, false, false, false, false, false, true, 2, 2, 0, loo_5args },
        { "operator()", false, false, false, false, true, true, false, false, false, false, true, false, false, true, 1, 1, 0, operator_const_6args },
        { "operator()", false, false, false, false, false, true, false, false, false, false, false, false, false, true, 2, 2, 0, operator_nonconst_7args },
        { "inout", false, false, false, false, false, false, false, false, false, false, true, false, false, true, 1, 1, 1, inout_8args },
        { "nested", false, false, false, false, false, false, true, false, false, false, false, false, false, true, 1, 1, 0, nested_9args },
        { "dummy", false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, 0, nullptr },
    };
    inline static const meta::arg boo_0args[] = {
       { "key", "const char*", "const char*", "", "const char*", "", "", "", "", nullptr, true, true, false, false, false, false, false, true, false, false, false, false, "" },
       { "some", "int", "int", "", "int", "", "", "", "", &meta::stream_op<int>::fn, false, false, false, false, false, false, false, true, false, false, false, false, "" },
    };
    inline static const meta::method events[] = {
        { "boo", false, false, false, false, false, false, false, false, false, false, false, false, false, true, 2, 2, 0, boo_0args },
        { "body", false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, 0, nullptr },
        { "strbody", false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, 0, nullptr },
    };
    inline static const meta::interface ifc_meta = {
        "ifc_int", // interface name
        { 0 }, // namespaces
        "ifc_int.h", // header file
        "iref<n1::n2::thing>", // storage
        "thingface", // base class name
        { 0 }, // base class namespaces
        1, 10, 3, // num. creators/methods/events
        creators, methods, events
    };

private:

    inline static coid::binstring* _capture = 0;
    inline static uint16 _instid = 0xffffU;
    inline static ifn_t* _vtable1 = 0;
    inline static ifn_t* _vtable2 = 0;

    static ifn_t* get_vtable()
    {
        if (_vtable1) return _vtable1;

        _vtable1 = new ifn_t[10];
        _vtable1[0] = reinterpret_cast<ifn_t>(static_cast<void(policy_intrusive_base::*)()>(&::n1::n2::thing::destroy));
        _vtable1[1] = reinterpret_cast<ifn_t>(static_cast<int(policy_intrusive_base::*)(int,const coid::token&,coid::charstr&)>(&::n1::n2::thing::hallo));
        _vtable1[2] = reinterpret_cast<ifn_t>(static_cast<void(policy_intrusive_base::*)()>(&::n1::n2::thing::noargs));
        _vtable1[3] = reinterpret_cast<ifn_t>(static_cast<coid::charstr(policy_intrusive_base::*)(bool,const char*)>(&::n1::n2::thing::fallo));
        _vtable1[4] = reinterpret_cast<ifn_t>(static_cast<void(policy_intrusive_base::*)(bool,int)>(&::n1::n2::thing::loo));
        _vtable1[5] = reinterpret_cast<ifn_t>(static_cast<double(policy_intrusive_base::*)(const char*)const>(&::n1::n2::thing::operator()));
        _vtable1[6] = reinterpret_cast<ifn_t>(static_cast<void(policy_intrusive_base::*)(const char*,double)>(&::n1::n2::thing::operator()));
        _vtable1[7] = reinterpret_cast<ifn_t>(static_cast<void(policy_intrusive_base::*)(test*&)>(&::n1::n2::thing::inout));
        _vtable1[8] = reinterpret_cast<ifn_t>(static_cast<void(policy_intrusive_base::*)(const coid::dynarray<bt::base>&)>(&::n1::n2::thing::nested));
        _vtable1[9] = reinterpret_cast<ifn_t>(static_cast<void(policy_intrusive_base::*)()>(&::n1::n2::thing::dummy));
        return _vtable1;
    }

    #define VT_CALL2(R,F,I) ((*reinterpret_cast<policy_intrusive_base*>(this)).*(reinterpret_cast<R(policy_intrusive_base::*)F>(_vtable1[I])))


    static ifn_t* get_vtable_intercept()
    {
        if (_vtable2) return _vtable2;
        ifn_t* vtable1 = get_vtable();

        _vtable2 = new ifn_t[10];
        _vtable2[0] = vtable1[0];
        _vtable2[1] = vtable1[1];
        _vtable2[2] = vtable1[2];
        _vtable2[3] = vtable1[3];
        _vtable2[4] = vtable1[4];
        _vtable2[5] = vtable1[5];
        _vtable2[6] = vtable1[6];
        _vtable2[7] = vtable1[7];
        _vtable2[8] = vtable1[8];
        _vtable2[9] = vtable1[9];
        return _vtable2;
    }


protected:

    COIDNEWDELETE(ifc_int_dispatcher);

    ifc_int_dispatcher() {
    }

    virtual ~ifc_int_dispatcher() {
    }

    bool intergen_bind_capture( coid::binstring* capture, uint instid ) override
    {
        if (instid >= 0xffU)
            return false;

        _instid = uint16(instid << 8U);
        _capture = capture;
        _vtable = _capture ? get_vtable_intercept() : get_vtable();
        return true;
    }

    void intergen_capture_dispatch( uint mid, coid::binstring& bin ) override
    {
        switch(mid) {
        case UMAX32:
        default: throw coid::exception("unknown method id in ifc_int capture dispatcher");
        }
    }

    static iref<ifc_int> _generic_interface_creator(::n1::n2::thing* host, ifc_int* __here__)
    {
        iref<ifc_int> rval;
        //an active interface (with events)
        if (host->_ifc && !__here__)
            rval = intergen_active_interface(host);

        if (rval.is_empty()) {
            //interface not taken from host
            ifc_int_dispatcher* dispatcher = __here__
                ? static_cast<ifc_int_dispatcher*>(__here__)
                : new ifc_int_dispatcher;
            rval.create(dispatcher);

            dispatcher->set_host(host, rval.get(), __here__ ? 0 : &rval);
        }

        return rval;
    }

public:

    // creator methods

    static iref<ifc_int> get( ifc_int* __here__ )
    {
        iref<::n1::n2::thing> __host__ = ::n1::n2::thing::get_thing();
        if (!__host__)
            return 0;
        return _generic_interface_creator(__host__.get(), __here__);
    }

    ///Register interface creators in the global registry
    static void register_interfaces( bool on )
    {
        interface_register::register_interface_creator(
            "ns::ifc_int@wrapper",
            on ? (void*)&_generic_interface_creator : nullptr);

        interface_register::register_interface_creator(
            "ns::ifc_int.get@1236754145",
            on ? (void*)&get : nullptr);
    }
};


iref<ifc_int> ifc_int::intergen_active_interface(::n1::n2::thing* host)
{
    coid::comm_mutex& mx = share_lock();

    GUARDTHIS(mx);
    iref<ifc_int> rval;
    rval.add_refcount(static_cast<ifc_int*>(host->_ifc.get()));

    return rval;
}

bool ifc_int::assign_safe(intergen_interface* client__, iref<ifc_int>* pout)
{
    //try assigning to the host (MT guard)
    // if that fails, the interface will be passive (no events)

    ::n1::n2::thing* hostptr = host<::n1::n2::thing>();
    if (!hostptr)
        return false;

    coid::clean_ptr<intergen_interface>& ifcvar = hostptr->_ifc;
    coid::comm_mutex& mx = share_lock();
    if (ifcvar == client__)
        return true;

    GUARDTHIS(mx);
    //assign only if nobody assigned before us
    bool succ = !ifcvar || !client__;
    if (succ) {
        ifcvar = client__;
        _cleaner = client__ ? &_cleaner_callback : 0;
    }
    else if (pout)
        pout->add_refcount(static_cast<ifc_int*>(ifcvar.get()));

    return succ;
}

bool ifc_int::set_host(policy_intrusive_base* host__, intergen_interface* client__, iref<ifc_int>* pout)
{
    _host = host__;
    _vtable = ifc_int_dispatcher::get_vtable();

    return assign_safe(client__, pout);
}

//auto-register the available interface creators
LOCAL_SINGLETON_DEF(ifc_autoregger) ifc_int_autoregger = new ifc_autoregger(&ifc_int_dispatcher::register_interfaces);

void* force_register_ifc_int() {
    LOCAL_SINGLETON_DEF(ifc_autoregger) autoregger = new ifc_autoregger(&ifc_int_dispatcher::register_interfaces);
    return autoregger.get();
}

} //namespace ns

// events

namespace n1 {
namespace n2 {

} //namespace n1
} //namespace n2

static_assert( std::is_base_of<policy_intrusive_base, ::n1::n2::inherit_external>::value, "class 'inherit_external' must be derived from policy_intrusive_base");

////////////////////////////////////////////////////////////////////////////////
// interface ns::ifc_ext of class inherit_external

namespace ns {

///
class ifc_ext_dispatcher : public ifc_ext
{
    friend class ifc_ext;

    inline static const meta::arg hallo_1args[] = {
       { "a", "int", "int", "", "int", "", "", "", "", &meta::stream_op<int>::fn, false, false, false, false, false, false, false, true, false, false, false, false, "some argument \" test escaping" },
       { "b", "const coid::token&", "coid::token", "coid", "token", "", "", "", "", &meta::stream_op<coid::token>::fn, false, false, true, false, false, false, false, true, false, false, false, false, "" },
       { "c", "coid::charstr&", "coid::charstr", "coid", "charstr", "", "", "", "", &meta::stream_op<coid::charstr>::fn, false, false, true, false, false, false, false, false, true, false, false, false, "" },
    };
    inline static const meta::arg fallo_3args[] = {
       { "b", "bool", "bool", "", "bool", "", "", "", "", &meta::stream_op<bool>::fn, false, false, false, false, false, false, false, true, false, false, false, false, "" },
       { "str", "const char*", "const char*", "", "const char*", "", "", "", "", nullptr, true, true, false, false, false, false, false, true, false, false, false, false, "" },
    };
    inline static const meta::arg loo_4args[] = {
       { "a", "bool", "bool", "", "bool", "", "", "", "", &meta::stream_op<bool>::fn, false, false, false, false, false, false, false, true, false, false, false, false, "" },
       { "b", "int", "int", "", "int", "", "", "", "", &meta::stream_op<int>::fn, false, false, false, false, false, false, false, true, false, false, false, false, "" },
    };
    inline static const meta::arg operator_const_5args[] = {
       { "key", "const char*", "const char*", "", "const char*", "", "", "", "", nullptr, true, true, false, false, false, false, false, true, false, false, false, false, "" },
    };
    inline static const meta::arg inout_6args[] = {
       { "par", "test*&", "test*", "", "test*", "", "", "", "", &meta::stream_op<test*>::fn, false, false, true, false, false, false, false, true, true, false, false, false, "" },
    };
    inline static const meta::arg nested_7args[] = {
       { "stuff", "const coid::dynarray<bt::base>&", "coid::dynarray<bt::base>", "coid", "dynarray<bt::base>", "", "", "", "", nullptr, false, false, true, false, false, false, false, true, false, false, false, false, "" },
    };
    inline static const meta::method* creators = nullptr;
    inline static const meta::method methods[] = {
        { "destroy", false, false, false, false, false, false, false, false, false, true, false, false, false, true, 0, 0, 0, nullptr },
        { "hallo", false, false, false, false, false, false, false, false, false, false, true, false, false, true, 3, 2, 1, hallo_1args },
        { "noargs", false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, 0, nullptr },
        { "fallo", false, false, false, false, false, false, false, false, false, false, true, false, false, true, 2, 2, 0, fallo_3args },
        { "loo", false, false, false, false, false, false, false, false, false, false, false, false, false, true, 2, 2, 0, loo_4args },
        { "operator()", false, false, false, false, true, true, false, false, false, false, true, false, false, true, 1, 1, 0, operator_const_5args },
        { "inout", false, false, false, false, false, false, false, false, false, false, true, false, false, true, 1, 1, 1, inout_6args },
        { "nested", false, false, false, false, false, false, true, false, false, false, false, false, false, true, 1, 1, 0, nested_7args },
        { "mummy", false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, 0, nullptr },
    };
    inline static const meta::arg boo_0args[] = {
       { "key", "const char*", "const char*", "", "const char*", "", "", "", "", nullptr, true, true, false, false, false, false, false, true, false, false, false, false, "" },
       { "some", "int", "int", "", "int", "", "", "", "", &meta::stream_op<int>::fn, false, false, false, false, false, false, false, true, false, false, false, false, "" },
    };
    inline static const meta::method events[] = {
        { "boo", false, false, false, false, false, false, false, false, false, false, false, false, false, true, 2, 2, 0, boo_0args },
        { "body", false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, 0, nullptr },
        { "strbody", false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, 0, nullptr },
    };
    inline static const meta::interface ifc_meta = {
        "ifc_ext", // interface name
        { 0 }, // namespaces
        "ifc_ext.h", // header file
        "", // storage
        "thingface", // base class name
        { 0 }, // base class namespaces
        0, 9, 3, // num. creators/methods/events
        creators, methods, events
    };

private:

    inline static coid::binstring* _capture = 0;
    inline static uint16 _instid = 0xffffU;
    inline static ifn_t* _vtable1 = 0;
    inline static ifn_t* _vtable2 = 0;

    static ifn_t* get_vtable()
    {
        if (_vtable1) return _vtable1;

        _vtable1 = new ifn_t[9];
        _vtable1[0] = reinterpret_cast<ifn_t>(static_cast<void(policy_intrusive_base::*)()>(&::n1::n2::thing::destroy));
        _vtable1[1] = reinterpret_cast<ifn_t>(static_cast<int(policy_intrusive_base::*)(int,const coid::token&,coid::charstr&)>(&::n1::n2::thing::hallo));
        _vtable1[2] = reinterpret_cast<ifn_t>(static_cast<void(policy_intrusive_base::*)()>(&::n1::n2::thing::noargs));
        _vtable1[3] = reinterpret_cast<ifn_t>(static_cast<coid::charstr(policy_intrusive_base::*)(bool,const char*)>(&::n1::n2::thing::fallo));
        _vtable1[4] = reinterpret_cast<ifn_t>(static_cast<void(policy_intrusive_base::*)(bool,int)>(&::n1::n2::thing::loo));
        _vtable1[5] = reinterpret_cast<ifn_t>(static_cast<double(policy_intrusive_base::*)(const char*)const>(&::n1::n2::thing::operator()));
        _vtable1[6] = reinterpret_cast<ifn_t>(static_cast<void(policy_intrusive_base::*)(test*&)>(&::n1::n2::thing::inout));
        _vtable1[7] = reinterpret_cast<ifn_t>(static_cast<void(policy_intrusive_base::*)(const coid::dynarray<bt::base>&)>(&::n1::n2::thing::nested));
        _vtable1[8] = reinterpret_cast<ifn_t>(static_cast<void(policy_intrusive_base::*)()>(&::n1::n2::inherit_external::mummy));
        return _vtable1;
    }

    #define VT_CALL2(R,F,I) ((*reinterpret_cast<policy_intrusive_base*>(this)).*(reinterpret_cast<R(policy_intrusive_base::*)F>(_vtable1[I])))


    static ifn_t* get_vtable_intercept()
    {
        if (_vtable2) return _vtable2;
        ifn_t* vtable1 = get_vtable();

        _vtable2 = new ifn_t[9];
        _vtable2[0] = vtable1[0];
        _vtable2[1] = vtable1[1];
        _vtable2[2] = vtable1[2];
        _vtable2[3] = vtable1[3];
        _vtable2[4] = vtable1[4];
        _vtable2[5] = vtable1[5];
        _vtable2[6] = vtable1[6];
        _vtable2[7] = vtable1[7];
        _vtable2[8] = vtable1[8];
        return _vtable2;
    }


protected:

    COIDNEWDELETE(ifc_ext_dispatcher);

    ifc_ext_dispatcher() {
    }

    virtual ~ifc_ext_dispatcher() {
    }

    bool intergen_bind_capture( coid::binstring* capture, uint instid ) override
    {
        if (instid >= 0xffU)
            return false;

        _instid = uint16(instid << 8U);
        _capture = capture;
        _vtable = _capture ? get_vtable_intercept() : get_vtable();
        return true;
    }

    void intergen_capture_dispatch( uint mid, coid::binstring& bin ) override
    {
        switch(mid) {
        case UMAX32:
        default: throw coid::exception("unknown method id in ifc_ext capture dispatcher");
        }
    }

    static iref<ifc_ext> _generic_interface_creator(::n1::n2::inherit_external* host, ifc_ext* __here__)
    {
        iref<ifc_ext> rval;
        //an active interface (with events)
        if (host->_ifc && !__here__)
            rval = intergen_active_interface(host);

        if (rval.is_empty()) {
            //interface not taken from host
            ifc_ext_dispatcher* dispatcher = __here__
                ? static_cast<ifc_ext_dispatcher*>(__here__)
                : new ifc_ext_dispatcher;
            rval.create(dispatcher);

            dispatcher->set_host(host, rval.get(), __here__ ? 0 : &rval);
        }

        return rval;
    }

public:

    // creator methods

    ///Register interface creators in the global registry
    static void register_interfaces( bool on )
    {
        interface_register::register_interface_creator(
            "ns::ifc_ext@wrapper",
            on ? (void*)&_generic_interface_creator : nullptr);

    }
};


iref<ifc_ext> ifc_ext::intergen_active_interface(::n1::n2::inherit_external* host)
{
    coid::comm_mutex& mx = share_lock();

    GUARDTHIS(mx);
    iref<ifc_ext> rval;
    rval.add_refcount(static_cast<ifc_ext*>(host->_ifc.get()));

    return rval;
}

bool ifc_ext::assign_safe(intergen_interface* client__, iref<ifc_ext>* pout)
{
    //try assigning to the host (MT guard)
    // if that fails, the interface will be passive (no events)

    ::n1::n2::inherit_external* hostptr = host<::n1::n2::inherit_external>();
    if (!hostptr)
        return false;

    coid::clean_ptr<intergen_interface>& ifcvar = hostptr->_ifc;
    coid::comm_mutex& mx = share_lock();
    if (ifcvar == client__)
        return true;

    GUARDTHIS(mx);
    //assign only if nobody assigned before us
    bool succ = !ifcvar || !client__;
    if (succ) {
        ifcvar = client__;
        _cleaner = client__ ? &_cleaner_callback : 0;
    }
    else if (pout)
        pout->add_refcount(static_cast<ifc_ext*>(ifcvar.get()));

    return succ;
}

bool ifc_ext::set_host(policy_intrusive_base* host__, intergen_interface* client__, iref<ifc_ext>* pout)
{
    _host = host__;
    _vtable = ifc_ext_dispatcher::get_vtable();

    return assign_safe(client__, pout);
}

//auto-register the available interface creators
LOCAL_SINGLETON_DEF(ifc_autoregger) ifc_ext_autoregger = new ifc_autoregger(&ifc_ext_dispatcher::register_interfaces);

void* force_register_ifc_ext() {
    LOCAL_SINGLETON_DEF(ifc_autoregger) autoregger = new ifc_autoregger(&ifc_ext_dispatcher::register_interfaces);
    return autoregger.get();
}

} //namespace ns

// events

namespace n1 {
namespace n2 {

} //namespace n1
} //namespace n2

////////////////////////////////////////////////////////////////////////////////
// interface ns::ifc_ext2 of class inherit_external

namespace ns {

///
class ifc_ext2_dispatcher : public ifc_ext2
{
    friend class ifc_ext2;

    inline static const meta::method* creators = nullptr;
    inline static const meta::method methods[] = {
        { "mummy", false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, 0, nullptr },
    };
    inline static const meta::method events[] = {
        { "loo", false, false, false, false, false, false, false, false, false, false, true, false, false, false, 0, 0, 0, nullptr },
    };
    inline static const meta::interface ifc_meta = {
        "ifc_ext2", // interface name
        { 0 }, // namespaces
        "ifc_ext2.h", // header file
        "", // storage
        "ifc_ext", // base class name
        { 0 }, // base class namespaces
        0, 1, 1, // num. creators/methods/events
        creators, methods, events
    };

private:

    inline static coid::binstring* _capture = 0;
    inline static uint16 _instid = 0xffffU;
    inline static ifn_t* _vtable1 = 0;
    inline static ifn_t* _vtable2 = 0;

    static ifn_t* get_vtable()
    {
        if (_vtable1) return _vtable1;

        _vtable1 = new ifn_t[1];
        _vtable1[0] = reinterpret_cast<ifn_t>(static_cast<void(policy_intrusive_base::*)()>(&::n1::n2::inherit_external::mummy));
        return _vtable1;
    }

    #define VT_CALL2(R,F,I) ((*reinterpret_cast<policy_intrusive_base*>(this)).*(reinterpret_cast<R(policy_intrusive_base::*)F>(_vtable1[I])))


    static ifn_t* get_vtable_intercept()
    {
        if (_vtable2) return _vtable2;
        ifn_t* vtable1 = get_vtable();

        _vtable2 = new ifn_t[1];
        _vtable2[0] = vtable1[0];
        return _vtable2;
    }


protected:

    COIDNEWDELETE(ifc_ext2_dispatcher);

    ifc_ext2_dispatcher() {
    }

    virtual ~ifc_ext2_dispatcher() {
    }

    bool intergen_bind_capture( coid::binstring* capture, uint instid ) override
    {
        if (instid >= 0xffU)
            return false;

        _instid = uint16(instid << 8U);
        _capture = capture;
        _vtable = _capture ? get_vtable_intercept() : get_vtable();
        return true;
    }

    void intergen_capture_dispatch( uint mid, coid::binstring& bin ) override
    {
        switch(mid) {
        case UMAX32:
        default: throw coid::exception("unknown method id in ifc_ext2 capture dispatcher");
        }
    }

    static iref<ifc_ext2> _generic_interface_creator(::n1::n2::inherit_external* host, ifc_ext2* __here__)
    {
        iref<ifc_ext2> rval;
        //an active interface (with events)
        if (host->_ifc && !__here__)
            rval = intergen_active_interface(host);

        if (rval.is_empty()) {
            //interface not taken from host
            ifc_ext2_dispatcher* dispatcher = __here__
                ? static_cast<ifc_ext2_dispatcher*>(__here__)
                : new ifc_ext2_dispatcher;
            rval.create(dispatcher);

            dispatcher->set_host(host, rval.get(), __here__ ? 0 : &rval);
        }

        return rval;
    }

public:

    // creator methods

    ///Register interface creators in the global registry
    static void register_interfaces( bool on )
    {
        interface_register::register_interface_creator(
            "ns::ifc_ext2@wrapper",
            on ? (void*)&_generic_interface_creator : nullptr);

    }
};


iref<ifc_ext2> ifc_ext2::intergen_active_interface(::n1::n2::inherit_external* host)
{
    coid::comm_mutex& mx = share_lock();

    GUARDTHIS(mx);
    iref<ifc_ext2> rval;
    rval.add_refcount(static_cast<ifc_ext2*>(host->_ifc.get()));

    return rval;
}

bool ifc_ext2::assign_safe(intergen_interface* client__, iref<ifc_ext2>* pout)
{
    //try assigning to the host (MT guard)
    // if that fails, the interface will be passive (no events)

    ::n1::n2::inherit_external* hostptr = host<::n1::n2::inherit_external>();
    if (!hostptr)
        return false;

    coid::clean_ptr<intergen_interface>& ifcvar = hostptr->_ifc;
    coid::comm_mutex& mx = share_lock();
    if (ifcvar == client__)
        return true;

    GUARDTHIS(mx);
    //assign only if nobody assigned before us
    bool succ = !ifcvar || !client__;
    if (succ) {
        ifcvar = client__;
        _cleaner = client__ ? &_cleaner_callback : 0;
    }
    else if (pout)
        pout->add_refcount(static_cast<ifc_ext2*>(ifcvar.get()));

    return succ;
}

bool ifc_ext2::set_host(policy_intrusive_base* host__, intergen_interface* client__, iref<ifc_ext2>* pout)
{
    _host = host__;
    _vtable = ifc_ext2_dispatcher::get_vtable();

    return assign_safe(client__, pout);
}

//auto-register the available interface creators
LOCAL_SINGLETON_DEF(ifc_autoregger) ifc_ext2_autoregger = new ifc_autoregger(&ifc_ext2_dispatcher::register_interfaces);

void* force_register_ifc_ext2() {
    LOCAL_SINGLETON_DEF(ifc_autoregger) autoregger = new ifc_autoregger(&ifc_ext2_dispatcher::register_interfaces);
    return autoregger.get();
}

} //namespace ns

// events

namespace n1 {
namespace n2 {

bool inherit_external::loo()
{
    if (!_ifc)
        throw coid::exception("Client not connected! (loo)");
    else
        return _ifc->iface<ns::ifc_ext2>()->loo();
}

} //namespace n1
} //namespace n2

