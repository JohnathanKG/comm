#pragma once

#ifndef __INTERGEN_GENERATED__other_LUA_H__
#define __INTERGEN_GENERATED__other_LUA_H__

//@file Lua interface file for other interface generated by intergen
//See LICENSE file for copyright and license information

#include "other.h"

#include <comm/intergen/ifc.lua.h>
#include <comm/token.h>

namespace ns {
namespace lua {

class other
{
public:

    //@param script - script for object to bind to
    //@param bindvar - name of variable in script context for object to bind to
    //@param ctx -  
    static iref<ns::other> create( lua_State * L, const ::lua::script_handle& script, const coid::charstr& str, const coid::token& bindvar = coid::token(), iref<::lua::registry_handle>* ctx = 0)
    {
        typedef iref<ns::other> (*fn_bind)(lua_State * L, const ::lua::script_handle&, const coid::charstr&, const coid::token&, iref<::lua::registry_handle>*);
        static fn_bind binder = 0;
        static const coid::token ifckey = "ns::lua::other.create@creator";
        
        if(!binder)
            binder = reinterpret_cast<fn_bind>(
                coid::interface_register::get_interface_creator(ifckey));

        if(!binder)
            throw coid::exception("interface binder inaccessible: ") << ifckey;

        return binder(L, script, str, bindvar, ctx);
    }
};

} //namespace lua
} //namespace


#endif //__INTERGEN_GENERATED__other_LUA_H__
