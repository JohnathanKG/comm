
//@file  javascript interface dispatcher generated by intergen v6
//See LICENSE file for copyright and license information

#include <comm/metastream/metastream.h>
#include <comm/metastream/fmtstream_v8.h>
#include <comm/binstream/filestream.h>
#include <comm/binstream/binstreambuf.h>

#include "ifc/thingface.js.h"

using namespace coid;

////////////////////////////////////////////////////////////////////////////////
//
// javascript handler of interface thingface of class thing
//
////////////////////////////////////////////////////////////////////////////////

namespace ifc1 {
namespace ifc2 {
namespace js {

////////////////////////////////////////////////////////////////////////////////
class thingface_js_dispatcher
    : public ::js::interface_wrapper_base<ifc1::ifc2::thingface>
{
    mutable v8::Persistent<v8::Function> _events[1];
    mutable bool _bound_events;

#ifdef V8_MAJOR_VERSION
    static void _js_release_callback(const v8::WeakCallbackInfo<void*>& data)
    {
        void* p = data.GetParameter();
        thingface_js_dispatcher* ifc = static_cast<thingface_js_dispatcher*>(p);
        ifc->_object.Empty();
        ifc->release_refcount();
    }

#else

    static void _js_release_callback(v8::Persistent<v8::Value> object, void* p)
    {
        thingface_js_dispatcher* ifc = static_cast<thingface_js_dispatcher*>(p);
        DASSERT( ifc->_object == object );
        ifc->_object.Clear();
        ifc->release_refcount();

        object.Dispose();
    }
#endif

protected:

    EBackend intergen_backend() const override { return IFC_BACKEND_JS; }

public:

    v8::Handle<v8::Object> create_interface_object( v8::Handle<v8::Context> context, bool make_weak );

    static v8::Handle<v8::Script> load_script( const coid::token& scriptfile, const coid::token& file_name );
    void bind_events( v8::Handle<v8::Context> context, bool force, v8::Handle<v8::Value> ref ) const;

    COIDNEWDELETE("ifc1::ifc2::thingface_js_dispatcher");

    thingface_js_dispatcher() : _bound_events(false)
    {}

    thingface_js_dispatcher( ifc1::ifc2::thingface* orig ) : _bound_events(false) {
        _base.create(orig);
        _vtable = _base->vtable();
        //V8_PERSISTENT(v8::Isolate::GetCurrent(), _context, context);

		_host = _base->host<policy_intrusive_base>();
    }

    ~thingface_js_dispatcher() {
        //V8_RESET(_eventobj);

        for (int i=0; i<1; ++i) {
            V8_RESET(_events[i]);
        }

        V8_RESET(_object);

        //V8_RESET(_script);
        //V8_RESET(_context);
    }

    bool intergen_bind_capture( coid::binstring* capture, uint instid ) override
    {
        return _real()->intergen_bind_capture(capture, instid);
    }

    void intergen_capture_dispatch( uint mid, coid::binstring& bin ) override
    {
        _real()->intergen_capture_dispatch(mid, bin);
    }

    // --- creators ---

    static iref<thingface_js_dispatcher> get( const script_handle& scriptpath, const coid::token& bindname, v8::Handle<v8::Context>* );

    static v8::Handle<v8::Value> v8creator_get0(const v8::ARGUMENTS& args, interface_context* ifc);

    ///Handler for generic $query_interface javascript method
    static v8::CBK_RET v8query_interface( const v8::ARGUMENTS& args );
    static v8::CBK_RET v8query_interface_global( const v8::ARGUMENTS& args );
    static v8::CBK_RET v8log( const v8::ARGUMENTS& args );
    static v8::CBK_RET v8rebind_events( const v8::ARGUMENTS& args );
    static v8::CBK_RET v8current_global( const v8::ARGUMENTS& args );

    // --- method wrappers ---

    static v8::CBK_RET v8_hallo0( const v8::ARGUMENTS& args );
    static v8::CBK_RET v8_fallo1( const v8::ARGUMENTS& args );

    // --- interface events ---

    virtual void boo( const char* key ) override;

    virtual bool is_bound_boo() override { return is_event_bound(0); }

    virtual void force_bind_script_events() {
        v8::Isolate* iso = v8::Isolate::GetCurrent();
        //v8::Context::Scope context_scope(V8_LOCAL(iso, _context));
        V8_HANDLE_SCOPE(iso, handle_scope__);
        v8::TryCatch trycatch__;

        bind_events(context(iso), true, v8::Local<v8::Value>());
    }

private:
    bool is_event_bound( int id )
    {
        v8::Isolate* iso = v8::Isolate::GetCurrent();

        if (!_bound_events) {
            //v8::Context::Scope context_scope(V8_LOCAL(iso, _context));
            V8_HANDLE_SCOPE(iso, handle_scope__);
            v8::TryCatch trycatch__;

            bind_events(context(iso), false, V8_UNDEFINED);
        }

        return !_events[id].IsEmpty() && !V8_LOCAL(iso, _events[id])->IsUndefined();
    }

    //event wrappers for event invocation from js
    static v8::CBK_RET v8_evback_boo0(const v8::ARGUMENTS& args);
};

////////////////////////////////////////////////////////////////////////////////
v8::CBK_RET thingface_js_dispatcher::v8_hallo0( const v8::ARGUMENTS& args )
{
    v8::Isolate* iso = args.GetIsolate();

    if (args.Length() < 2 || args.Length() > 2) { //in/inout arguments
        coid::charstr tmp = "Wrong number of arguments in ";
        tmp << "thingface.hallo";
        return v8::throw_js(iso, v8::Exception::SyntaxError, tmp);
    }

    V8_ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::Local<v8::Object> obj__ = args.Holder();
    if (obj__.IsEmpty() || obj__->InternalFieldCount() == 0)
        return V8_RETURN(args, V8_UNDEFINED);

    v8::Local<v8::Value> intobj__ = obj__->GetInternalField(0);
    if (!intobj__->IsExternal())
        return V8_RETURN(args, V8_UNDEFINED);

    ::js::interface_wrapper_base<ifc1::ifc2::thingface>* ifc = static_cast<::js::interface_wrapper_base<ifc1::ifc2::thingface>*>
        (v8::Handle<v8::External>::Cast(intobj__)->Value());

    auto R_ = ifc ? ifc->_real() : 0;
    if (!R_) {
        coid::charstr tmp = "Null interface object in ";
        tmp << "thingface.hallo";
        return v8::throw_js(iso, &v8::Exception::ReferenceError, tmp);
    }

    v8::Context::Scope context_scope(ifc->context(iso));

    try {
    THREAD_SINGLETON(v8_streamer_context).reset();

    //stream the arguments in
    static_assert(CHECK::meta_operator_exists<int>::value, "missing metastream operator 'int'");
    static_assert(CHECK::meta_operator_exists<coid::token>::value, "missing metastream operator 'coid::token'");

    threadcached<int> a;
    from_v8(args[0], a);

    threadcached<coid::token> b;
    from_v8(args[1], b);

    //invoke
    coid::charstr c;

    int _rval_ = R_->hallo(a, b, c);

    //stream out
    static_assert( CHECK::meta_operator_exists<int>::value, "missing metastream operator for 'int'" );
    v8::Handle<v8::Object> r__ = V8_NEWTYPE(iso, Object);
    r__->Set(v8::symbol("$ret"), to_v8(_rval_));

    static_assert( CHECK::meta_operator_exists<coid::charstr>::value, "missing metastream operator for 'coid::charstr'" );
    r__->Set(v8::symbol("c"), to_v8(c));
 
#ifdef V8_MAJOR_VERSION
    args.GetReturnValue().Set(r__);
#else
    return V8_ESCAPE(handle_scope__, r__);
#endif

    } catch(const coid::exception& e) {
        return v8::throw_js(iso, &v8::Exception::TypeError, e.text());
    }
}

////////////////////////////////////////////////////////////////////////////////
v8::CBK_RET thingface_js_dispatcher::v8_fallo1( const v8::ARGUMENTS& args )
{
    v8::Isolate* iso = args.GetIsolate();

    if (args.Length() < 2 || args.Length() > 2) { //in/inout arguments
        coid::charstr tmp = "Wrong number of arguments in ";
        tmp << "thingface.fallo";
        return v8::throw_js(iso, v8::Exception::SyntaxError, tmp);
    }

    V8_ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::Local<v8::Object> obj__ = args.Holder();
    if (obj__.IsEmpty() || obj__->InternalFieldCount() == 0)
        return V8_RETURN(args, V8_UNDEFINED);

    v8::Local<v8::Value> intobj__ = obj__->GetInternalField(0);
    if (!intobj__->IsExternal())
        return V8_RETURN(args, V8_UNDEFINED);

    ::js::interface_wrapper_base<ifc1::ifc2::thingface>* ifc = static_cast<::js::interface_wrapper_base<ifc1::ifc2::thingface>*>
        (v8::Handle<v8::External>::Cast(intobj__)->Value());

    auto R_ = ifc ? ifc->_real() : 0;
    if (!R_) {
        coid::charstr tmp = "Null interface object in ";
        tmp << "thingface.fallo";
        return v8::throw_js(iso, &v8::Exception::ReferenceError, tmp);
    }

    v8::Context::Scope context_scope(ifc->context(iso));

    try {
    THREAD_SINGLETON(v8_streamer_context).reset();

    //stream the arguments in
    static_assert(CHECK::meta_operator_exists<bool>::value, "missing metastream operator 'bool'");
    static_assert(CHECK::meta_operator_exists<const char*>::value, "missing metastream operator 'const char*'");

    threadcached<bool> b;
    from_v8(args[0], b);

    threadcached<const char*> str;
    from_v8(args[1], str);

    //invoke
    coid::charstr _rval_ = R_->fallo(b, str);

    //stream out
    v8::Handle<v8::Value> r__;
    static_assert( CHECK::meta_operator_exists<coid::charstr>::value, "missing metastream operator for 'coid::charstr'" );
    r__ = to_v8(_rval_);

#ifdef V8_MAJOR_VERSION
    args.GetReturnValue().Set(r__);
#else
    return V8_ESCAPE(handle_scope__, r__);
#endif

    } catch(const coid::exception& e) {
        return v8::throw_js(iso, &v8::Exception::TypeError, e.text());
    }
}

////////////////////////////////////////////////////////////////////////////////
void thingface_js_dispatcher::boo( const char* key )
{
    v8::Isolate* iso = v8::Isolate::GetCurrent();

    V8_HANDLE_SCOPE(iso, handle_scope__);
    v8::Handle<v8::Context> ctx__ = context(iso);
    v8::Context::Scope context_scope__(ctx__);
    v8::TryCatch trycatch__;

    bind_events(ctx__, false, V8_UNDEFINED);
    auto ev__ = V8_LOCAL(iso, _events[0]);

    if (_events[0].IsEmpty() || ev__->IsUndefined())
        return;

// prepare in arguments
    THREAD_SINGLETON(v8_streamer_context).reset();

    static_assert( CHECK::meta_operator_exists<const char*>::value, "missing metastream operator for 'const char*'" );
    v8::Handle<v8::Value> __inargs[] = {
        v8_streamer<const char*>::to_v8(key)
    };

//  event call
    v8::Local<v8::Value> r__ = ev__->Call(
        V8_LOCAL(iso, _object),
        //_eventobj.IsEmpty() || V8_LOCAL(iso,_eventobj)->IsUndefined() ? V8_LOCAL(iso,_object) : V8_LOCAL(iso,_eventobj),
        1, __inargs);


    if (trycatch__.HasCaught())
        script_handle::throw_js_error(trycatch__, "ifc1::ifc2::js::thingface.boo(): ");
// gather results

}

////////////////////////////////////////////////////////////////////////////////
v8::CBK_RET thingface_js_dispatcher::v8_evback_boo0( const v8::ARGUMENTS& args )
{
    v8::Isolate* iso = args.GetIsolate();

    V8_ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::Local<v8::Object> obj__ = args.Holder();
    if (obj__.IsEmpty() || obj__->InternalFieldCount() == 0)
        return V8_RETURN(args, V8_UNDEFINED);

    v8::Local<v8::Value> intobj__ = obj__->GetInternalField(0);
    if (!intobj__->IsExternal())
        return V8_RETURN(args, V8_UNDEFINED);

    ifc1::ifc2::js::thingface_js_dispatcher* ifc = static_cast<ifc1::ifc2::js::thingface_js_dispatcher*>
        (v8::Handle<v8::External>::Cast(intobj__)->Value());

    v8::Handle<v8::Context> ctx = ifc->context(iso);
    v8::Context::Scope context_scope(ctx);
    v8::TryCatch trycatch__;

    ifc->bind_events(ctx, false, V8_UNDEFINED);
    auto ev__ = V8_LOCAL(iso, ifc->_events[0]);

    if (ifc->_events[0].IsEmpty() || ev__->IsUndefined()) {
        coid::charstr tmp = "Event not available: ";
        tmp << "boo";
        return v8::throw_js(iso, &v8::Exception::ReferenceError, tmp);
    }

    v8::Local<v8::Value> largs[1];
    int nargs = args.Length();
    if (nargs > 1)
        nargs = 1;
    for (int i=0; i<nargs; ++i)
        largs[i] = args[i];

    v8::Local<v8::Value> r__ = ev__->Call(
        V8_LOCAL(iso, ifc->_object),
        //ifc->_eventobj.IsEmpty() || V8_LOCAL(iso, ifc->_eventobj)->IsUndefined() ? V8_LOCAL(iso, ifc->_object) : V8_LOCAL(iso, ifc->_eventobj),
        nargs, largs);

#ifdef V8_MAJOR_VERSION
    args.GetReturnValue().Set(r__);
#else
    return V8_ESCAPE(handle_scope__, r__);
#endif
}


////////////////////////////////////////////////////////////////////////////////
v8::CBK_RET thingface_js_dispatcher::v8log( const v8::ARGUMENTS& args )
{
    v8::Isolate* iso = args.GetIsolate();

    if (args.Length() == 0)
        return V8_RETURN(args, V8_UNDEFINED);

    const void* inst = 0;

    v8::Local<v8::Object> obj__ = args.Holder();
    if (!obj__.IsEmpty() && obj__->InternalFieldCount() > 0) {
        v8::Local<v8::Value> intobj__ = obj__->GetInternalField(0);
        if (intobj__->IsExternal()) {
            ifc1::ifc2::js::thingface_js_dispatcher* ifc = static_cast<ifc1::ifc2::js::thingface_js_dispatcher*>
                (v8::Handle<v8::External>::Cast(intobj__)->Value());

            inst = ifc;
            if (!ifc)
                return v8::throw_js(iso, &v8::Exception::ReferenceError, "Null interface object in $log");
        }
    }

    V8_ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::String::Utf8Value key(args[0]);

    coid::token tokey(*key, key.length());

    intergen_interface::ifclog_ext(coid::log::none, coid::tokenhash("ifc1::ifc2::thingface"),
        inst, tokey);

    return V8_RETURN(args, V8_UNDEFINED);
}

////////////////////////////////////////////////////////////////////////////////
v8::CBK_RET thingface_js_dispatcher::v8query_interface( const v8::ARGUMENTS& args )
{
    v8::Isolate* iso = args.GetIsolate();

    if (args.Length() < 1)
        return v8::throw_js(iso, &v8::Exception::Error, "Interface creator name missing");

    V8_ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::String::Utf8Value key(args[0]);

    typedef v8::Handle<v8::Value> (*fn_get)(const v8::ARGUMENTS&, interface_context*);
    coid::token tokey(*key, key.length());
    fn_get get = reinterpret_cast<fn_get>(
        coid::interface_register::get_interface_creator(tokey));

    if (!get) {
        coid::charstr tmp = "interface creator ";
        tmp << tokey << " not found";
        return v8::throw_js(iso, v8::Exception::Error, tmp);
    }

    v8::Local<v8::Object> obj__ = args.Holder();
    if (obj__.IsEmpty() || obj__->InternalFieldCount() == 0)
        return V8_RETURN(args, V8_UNDEFINED);

    v8::Local<v8::Value> intobj__ = obj__->GetInternalField(0);
    if (!intobj__->IsExternal())
        return V8_RETURN(args, V8_UNDEFINED);

    ifc1::ifc2::js::thingface_js_dispatcher* ifc = static_cast<ifc1::ifc2::js::thingface_js_dispatcher*>
        (v8::Handle<v8::External>::Cast(intobj__)->Value());

    if (!ifc)
        return v8::throw_js(iso, &v8::Exception::ReferenceError, "Null interface object in $query_interface");

#ifdef V8_MAJOR_VERSION
    args.GetReturnValue().Set(get(args, ifc));
#else
    return V8_ESCAPE(handle_scope__, get(args, ifc));
#endif
}

////////////////////////////////////////////////////////////////////////////////
v8::CBK_RET thingface_js_dispatcher::v8query_interface_global( const v8::ARGUMENTS& args )
{
    v8::Isolate* iso = args.GetIsolate();

    if (args.Length() < 1)
        return v8::throw_js(iso, &v8::Exception::Error, "Interface creator name missing");

    V8_ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::String::Utf8Value key(args[0]);

    typedef v8::Handle<v8::Value> (*fn_get)(const v8::ARGUMENTS&, interface_context*);
    coid::token tokey(*key, key.length());
    fn_get get = reinterpret_cast<fn_get>(
        coid::interface_register::get_interface_creator(tokey));

    if (!get) {
        coid::charstr tmp = "interface creator ";
        tmp << tokey << " not found";
        return v8::throw_js(iso, v8::Exception::Error, tmp);
    }

#ifdef V8_MAJOR_VERSION
    args.GetReturnValue().Set(get(args, 0));
#else
    return V8_ESCAPE(handle_scope__, get(args, 0));
#endif
}

////////////////////////////////////////////////////////////////////////////////
v8::CBK_RET thingface_js_dispatcher::v8rebind_events( const v8::ARGUMENTS& args )
{
    v8::Isolate* iso = args.GetIsolate();
    V8_HANDLE_SCOPE(iso, handle_scope__);
    v8::Local<v8::Object> obj__ = args.Holder();
    if (obj__.IsEmpty() || obj__->InternalFieldCount() == 0)
        return V8_RETURN(args, V8_UNDEFINED);

    v8::Local<v8::Value> intobj__ = obj__->GetInternalField(0);
    if (!intobj__->IsExternal())
        return V8_RETURN(args, V8_UNDEFINED);

    ifc1::ifc2::js::thingface_js_dispatcher* ifc = static_cast<ifc1::ifc2::js::thingface_js_dispatcher*>
        (v8::Handle<v8::External>::Cast(intobj__)->Value());

    if (ifc) {
        v8::Local<v8::Value> val;
        if (args.Length() > 0)
            val = args[0];
        ifc->bind_events(ifc->context(iso), true, val);
    }

    return V8_RETURN(args, V8_UNDEFINED);
}

////////////////////////////////////////////////////////////////////////////////
v8::CBK_RET thingface_js_dispatcher::v8current_global( const v8::ARGUMENTS& args )
{
    v8::Isolate* iso = args.GetIsolate();

    V8_ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::Local<v8::Object> obj__ = args.Holder();
    if (obj__.IsEmpty() || obj__->InternalFieldCount() == 0)
        return V8_RETURN(args, V8_UNDEFINED);

    v8::Local<v8::Value> intobj__ = obj__->GetInternalField(0);
    if (!intobj__->IsExternal())
        return V8_RETURN(args, V8_UNDEFINED);

    ifc1::ifc2::js::thingface_js_dispatcher* ifc = static_cast<ifc1::ifc2::js::thingface_js_dispatcher*>
        (v8::Handle<v8::External>::Cast(intobj__)->Value());

#ifdef V8_MAJOR_VERSION
    args.GetReturnValue().Set(ifc->context(iso)->Global()->GetPrototype());
#else
    return V8_ESCAPE(handle_scope__, ifc->context(iso)->Global()->GetPrototype());
#endif
}

////////////////////////////////////////////////////////////////////////////////
v8::Handle<v8::Object> thingface_js_dispatcher::create_interface_object( v8::Handle<v8::Context> context, bool make_weak )
{
    v8::Isolate* iso = v8::Isolate::GetCurrent();

    static v8::Persistent<v8::ObjectTemplate> _objtempl;
    if (_objtempl.IsEmpty())
    {
        v8::Local<v8::ObjectTemplate> ot = V8_NEWTYPE(iso, ObjectTemplate);
        ot->SetInternalFieldCount(2);    //ptr and class hash id

        ot->Set(v8::symbol("hallo"), V8_NEWTYPE2(iso, FunctionTemplate, &v8_hallo0));
        ot->Set(v8::symbol("fallo"), V8_NEWTYPE2(iso, FunctionTemplate, &v8_fallo1));

        ot->Set(v8::symbol("$query_interface"), V8_NEWTYPE2(iso, FunctionTemplate, &v8query_interface));
        ot->Set(v8::symbol("$rebind_events"), V8_NEWTYPE2(iso, FunctionTemplate, &v8rebind_events));
        ot->Set(v8::symbol("$ctx"), V8_NEWTYPE2(iso, FunctionTemplate, &v8current_global));
        ot->Set(v8::symbol("$log"), V8_NEWTYPE2(iso, FunctionTemplate, &v8log));

        //event wrappers for event invocation from outside js
        ot->Set(v8::symbol("boo"), V8_NEWTYPE2(iso, FunctionTemplate, &v8_evback_boo0));

        V8_PERSISTENT(iso, _objtempl, ot);
    }

    v8::Context::Scope ctxscope(context);
    v8::Local<v8::Object> obj = V8_LOCAL(iso, _objtempl)->NewInstance();

    v8::Handle<v8::External> map_ptr = V8_NEWTYPE2(iso, External, this);
    obj->SetInternalField(0, map_ptr);
    v8::Handle<v8::External> hash_ptr = V8_NEWTYPE2(iso, External, (void*)ints(1571811577));
    obj->SetInternalField(1, hash_ptr);

    if (make_weak) {
        V8_PERSISTENT(iso, _object, obj);

#ifdef V8_MAJOR_VERSION
        void* p = this;
        _object.SetWeak(&p, _js_release_callback, v8::WeakCallbackType::kParameter);
        //_context.SetWeak();
#else
        _object.MakeWeak(this, _js_release_callback);
        //_context.MakeWeak(0, _js_release_callback);
#endif
        add_refcount();
    }

    return obj;
}

////////////////////////////////////////////////////////////////////////////////
v8::Handle<v8::Script> thingface_js_dispatcher::load_script( const coid::token& script, const coid::token& fname )
{
    v8::Local<v8::String> scriptv8 = v8::string_utf8(script);

    // set up an error handler to catch any exceptions the script might throw.
    v8::TryCatch trycatch__;

    v8::Handle<v8::Script> compiled_script = v8::Script::Compile(scriptv8, v8::symbol(fname));
    if (trycatch__.HasCaught())
        script_handle::throw_js_error(trycatch__, "ifc1::ifc2::js::thingface::load_script(): ");

    compiled_script->Run();
    if (trycatch__.HasCaught())
        script_handle::throw_js_error(trycatch__, "ifc1::ifc2::js::thingface::load_script(): ");

    return compiled_script;
}

////////////////////////////////////////////////////////////////////////////////
void thingface_js_dispatcher::bind_events( v8::Handle<v8::Context> context, bool force, v8::Handle<v8::Value> ref ) const
{
    if (!force && _bound_events)
        return;

    v8::Isolate* iso = context->GetIsolate();

    static token names[] = {
        "boo",
    };

    V8_HANDLE_SCOPE(iso, handle_scope__);
    v8::Context::Scope context_scope__(context);
    v8::TryCatch trycatch__;
    v8::Local<v8::Object> global;
    bool clear = false;
    if (ref.IsEmpty() || ref->IsUndefined())
        global = context->Global();
    else if (ref->IsNull())
        clear = true;
    else
        global = ref->ToObject();

    for (int i=0; i<1; ++i)
    {
        V8_RESET(_events[i]);

        if (clear)
            continue;

        v8::Local<v8::Value> var = global->Get(v8::symbol(names[i]));
        if (var->IsUndefined())
            continue;

        v8::Local<v8::Function> foo = v8::Local<v8::Function>::Cast(var);
        bool failed = trycatch__.HasCaught() || foo->IsUndefined();

        if (!failed)
             V8_PERSISTENT(iso, _events[i], foo);
    }

    _bound_events = true;
}

// --- creators ---

////////////////////////////////////////////////////////////////////////////////
iref<thingface_js_dispatcher> thingface_js_dispatcher::get( const script_handle& script, const coid::token& bindname, v8::Handle<v8::Context>* ctx )
{
    v8::Isolate* iso = script.has_context()
        ? script.context()->GetIsolate()
        : v8::Isolate::GetCurrent();

    V8_ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::Handle<v8::Context> context;

    // create interface object
    iref<thingface_js_dispatcher> ifc = ifc1::ifc2::thingface::get(new thingface_js_dispatcher);
    if (!ifc)
        throw coid::exception() << "failed to create interface object";

    // check if an external context provider is required
    if (script.is_path()) {
        coid::token path = script.str();
        path.cut_right('?', coid::token::cut_trait_remove_sep_default_empty());

        bool ispage = path.begins_with("http://") || path.begins_with("https://") || path.ends_with(".html");
        bool isscript = path.ends_with(".js");

        if (ispage && !isscript) {
            typedef v8::Handle<v8::Context> (*fn_getctx)(const coid::token&, policy_intrusive_base*);

            fn_getctx ctxgetter = reinterpret_cast<fn_getctx>(
                    coid::interface_register::get_interface_creator("~html@system_context_getter2"));

            if (!ctxgetter)
                throw coid::exception() << "unable to acquire the system context creator interface";

            context = ctxgetter(script.str(), ifc.get());
            if (context.IsEmpty())
                throw coid::exception() << "unable to create context";
        }
    }

    bool extctx = !context.IsEmpty();

    if (!extctx) {
        if (script.has_context())
            context = script.context();
        else
            context = V8_NEWTYPE(iso, Context);
    }

    //set early here as sometimes the invoked creator methods want to access it
    if (ctx)
        *ctx = V8_ESCAPE(handle_scope__, context);

    v8::Context::Scope context_scope(context);
    //V8_PERSISTENT(iso, ifc->_context, context);

    if (!extctx && !script.is_context())
    {
        if (!script.has_context()) {
            context->Global()->Set(v8::symbol("$include"), V8_NEWTYPE2(iso, FunctionTemplate, &script_handle::js_include)->GetFunction());
            context->Global()->Set(v8::symbol("$query_interface"), V8_NEWTYPE2(iso, FunctionTemplate, &thingface_js_dispatcher::v8query_interface_global)->GetFunction());
            context->Global()->Set(v8::symbol("$log"), V8_NEWTYPE2(iso, FunctionTemplate, &thingface_js_dispatcher::v8log)->GetFunction());
        }

        coid::token script_tok;
        coid::charstr script_tmp;
        if (script.is_path()) {
            coid::bifstream bif (script.str());
            if (!bif.is_open())
                throw coid::exception() << script.str() << " not found";

            script_tmp = script.prefix();

            coid::binstreambuf buf;
            buf.swap(script_tmp);
            buf.transfer_from(bif);
            buf.swap(script_tmp);

            script_tok = script_tmp;
        }
        else if (script.prefix()) {
            script_tmp << script.prefix() << script.str();
            script_tok = script_tmp;
        }
        else {
            script_tok = script.str();
        }

        V8_PERSISTENT(iso, ifc->_object, ifc->create_interface_object(context, false));
        if (bindname)
            context->Global()->Set(v8::symbol(bindname), V8_LOCAL(iso, ifc->_object));

        v8::Handle<v8::Script> compiled_script = load_script(script_tok, script.url());

        //V8_PERSISTENT(iso, ifc->_script, compiled_script);
    }
    else {
        V8_PERSISTENT(iso, ifc->_object, ifc->create_interface_object(context, false));

        if (bindname)
            context->Global()->Set(v8::symbol(bindname), V8_LOCAL(iso, ifc->_object));
    }

    return ifc;
}

////////////////////////////////////////////////////////////////////////////////
///Creator methods for access from JS
v8::Handle<v8::Value> thingface_js_dispatcher::v8creator_get0( const v8::ARGUMENTS& args, interface_context* ifc )
{
    v8::Isolate* iso = args.GetIsolate();

    if (args.Length() < 1+0 || args.Length() > 1+0) { //fnc name + in/inout arguments
        coid::charstr tmp = "Wrong number of arguments in ";
        tmp << "get";
        v8::throw_js(iso, &v8::Exception::Error, tmp);
        return V8_UNDEFINED;
    }

    V8_ESCAPABLE_SCOPE(iso, handle_scope__);
    v8::Local<v8::Object> obj__ = args.Holder();

    //ifc1::ifc2::js::thingface_js_dispatcher* ifc = static_cast<ifc1::ifc2::js::thingface_js_dispatcher*>
    //    (v8::Handle<v8::External>::Cast(obj__->GetInternalField(0))->Value());

    v8::Local<v8::Context> ctx = ifc && !ifc->_object.IsEmpty()
        ? ifc->context(iso)
        : V8_CUR_CONTEXT(iso);
    v8::Context::Scope context_scope(ctx);

    //stream the arguments in
    THREAD_SINGLETON(v8_streamer_context).reset();

    //invoke
    iref<thingface_js_dispatcher> nifc = ifc1::ifc2::thingface::get(new thingface_js_dispatcher);
    //if (nifc)
    //    V8_PERSISTENT(iso, nifc->_context, ctx);//ifc->_context);

    //stream out
    v8::Handle<v8::Value> r__ = nifc ? v8::Handle<v8::Value>(nifc->create_interface_object(ctx, true)) : V8_NULL(iso);

    return V8_ESCAPE(handle_scope__, r__);
}

////////////////////////////////////////////////////////////////////////////////
///Create JS wrapper from an existing interface object
v8::Handle<v8::Value> create_wrapper_thingface( ::ifc1::ifc2::thingface* orig, v8::Handle<v8::Context> context )
{
    v8::Isolate* iso = v8::Isolate::GetCurrent();

    // check that the orig points to an object
    if (!orig) return V8_NULL(iso);

    if (context.IsEmpty()) {
        context = V8_CUR_CONTEXT(iso);
    }

    v8::Context::Scope context_scope(context);
    V8_ESCAPABLE_SCOPE(iso, scope);

    iref<ifc1::ifc2::js::thingface_js_dispatcher> ifc;
    v8::Handle<v8::Object> obj;

    if (orig->intergen_backend() == intergen_interface::IFC_BACKEND_JS)
        obj = V8_LOCAL(iso, static_cast<thingface_js_dispatcher*>(orig)->_object);

    if (obj.IsEmpty()) {
        // create interface object
        ifc.create(new ifc1::ifc2::js::thingface_js_dispatcher(static_cast<::ifc1::ifc2::thingface*>(orig)));

        obj = ifc->create_interface_object(context, true);
    }

    return V8_ESCAPE(scope, obj);
}

////////////////////////////////////////////////////////////////////////////////
static void register_binders_for_thingface( bool on )
{
    //c++ creator of JS interface object
    interface_register::register_interface_creator(
        "ifc1::ifc2::thingface.get@creator.js",
        on ? (void*)&thingface_js_dispatcher::get : nullptr);

    //creator from script
    interface_register::register_interface_creator(
        "ifc1::ifc2::js::thingface.get",
        on ? (void*)&thingface_js_dispatcher::v8creator_get0 : nullptr);

    //wrapper interface creator from existing c++ interface
    interface_register::register_interface_creator(
        "ifc1::ifc2::thingface@wrapper.js",
        on ? (void*)&create_wrapper_thingface : nullptr);
}

//auto-register the bind function
LOCAL_SINGLETON_DEF(ifc_autoregger) thingface_autoregger = new ifc_autoregger(&register_binders_for_thingface);


void* force_register_thingface() {
    LOCAL_SINGLETON_DEF(ifc_autoregger) autoregger = new ifc_autoregger(&register_binders_for_thingface);
    return autoregger.get();
}

} //namespace js
} //namespace ifc1
} //namespace ifc2

