<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup>
    <PropertyPageSchema
      Include="$(MSBuildThisFileDirectory)$(MSBuildThisFileName).xml" />
    <AvailableItemName
      Include="hpp">
      <Targets>_hpp</Targets>
    </AvailableItemName>
  </ItemGroup>
  <UsingTask
    TaskName="hpp"
    TaskFactory="XamlTaskFactory"
    AssemblyName="Microsoft.Build.Tasks.v4.0">
    <Task>$(MSBuildThisFileDirectory)$(MSBuildThisFileName).xml</Task>
  </UsingTask>
  
  <Target Name="_hppDeps" Condition="'@(hpp)' != ''">
    <ReadLinesFromFile
        Condition="Exists('%(hpp.RootDir)%(hpp.Directory)%(hpp.Filename).intergen.deps')"
        File="%(hpp.RootDir)%(hpp.Directory)%(hpp.Filename).intergen.deps">
        <Output TaskParameter="Lines" PropertyName="hppDeps_%(hpp.Filename)" />
    </ReadLinesFromFile>
    <Message Text="HALOOO: (%(hpp.Filename)) hppDeps_%(hpp.Filename) $(hppDeps_%(hpp.Filename))"/>
  </Target>

  <Target Name="_WriteHppTlogs" Condition="'@(hpp)' != '' and '@(SelectedFiles)' == ''" DependsOnTargets="_hppDeps">
    <ItemGroup>
      <_hppReadTlog Include="^%(hpp.FullPath);%(hpp.AdditionalDependencies);$(hppDeps_%(hpp.Filename))" 
                     Condition="'%(hpp.ExcludedFromBuild)' != 'true' and '%(hpp.Outputs)' != ''"/>
      <_hppWriteTlog Include="^%(hpp.FullPath);%(hpp.Outputs)" 
                      Condition="'%(hpp.ExcludedFromBuild)' != 'true' and '%(hpp.Outputs)' != ''"/>
    </ItemGroup>

    <WriteLinesToFile
      Condition="'@(_hppReadTlog)' != ''"
      File="$(TLogLocation)hpp.read.1u.tlog"
      Lines="@(_hppReadTlog->MetaData('Identity')->ToUpperInvariant());"
      Overwrite="true"
      Encoding="Unicode"/>
    <WriteLinesToFile
      Condition="'@(_hppWriteTlog)' != ''"
      File="$(TLogLocation)hpp.write.1u.tlog"
      Lines="@(_hppWriteTlog->MetaData('Identity')->ToUpperInvariant());"
      Overwrite="true"
      Encoding="Unicode"/>

    <ItemGroup>
      <_hppReadTlog Remove="@(_hppReadTlog)" />
      <_hppWriteTlog Remove="@(_hppWriteTlog)" />
    </ItemGroup>
  </Target>
  
  <Target
    Name="_hpp"
    BeforeTargets="$(hppBeforeTargets)"
    AfterTargets="$(hppAfterTargets)"
    Condition="'@(hpp)' != ''"
    Outputs="%(hpp.Outputs)"
    Inputs="%(hpp.Identity);%(hpp.AdditionalDependencies);$(hppDeps_%(hpp.Filename))"
    DependsOnTargets="$(hppDependsOn);_WriteHppTlogs;_hppDeps;ComputehppOutput">
    <ItemGroup
      Condition="'@(SelectedFiles)' != ''">
      <hpp
        Remove="@(hpp)"
        Condition="'%(Identity)' != '@(SelectedFiles)'" />
    </ItemGroup>
    <ItemGroup>
      <hpp_tlog
        Include="%(hpp.Outputs)"
        Condition="'%(hpp.Outputs)' != '' and '%(hpp.ExcludedFromBuild)' != 'true'">
        <Source>@(hpp, '|')</Source>
      </hpp_tlog>
    </ItemGroup>
    <Message
      Importance="High"
      Text="%(hpp.ExecutionDescription)" />
    <WriteLinesToFile
      Condition="'@(hpp_tlog)' != '' and '%(hpp_tlog.ExcludedFromBuild)' != 'true'"
      File="$(IntDir)$(ProjectName).write.1.tlog"
      Lines="^%(hpp_tlog.Source);@(hpp_tlog-&gt;'%(Fullpath)')" />
    <hpp
      Condition="'@(hpp)' != '' and '%(hpp.ExcludedFromBuild)' != 'true'"
      CommandLineTemplate="%(hpp.CommandLineTemplate)"
      AdditionalOptions="%(hpp.AdditionalOptions)"
      StandardOutputImportance="High"
      StandardErrorImportance="High"
      EchoOff="true"
      Inputs="%(hpp.Identity)" />
  </Target>
  <PropertyGroup>
    <ComputeLinkInputsTargets>
            $(ComputeLinkInputsTargets);
            ComputehppOutput;
          </ComputeLinkInputsTargets>
    <ComputeLibInputsTargets>
            $(ComputeLibInputsTargets);
            ComputehppOutput;
          </ComputeLibInputsTargets>
  </PropertyGroup>
  <Target
    Name="ComputehppOutput"
    Condition="'@(hpp)' != ''">
    <ItemGroup>
      <hppDirsToMake
        Condition="'@(hpp)' != '' and '%(hpp.ExcludedFromBuild)' != 'true'"
        Include="%(hpp.Outputs)" />
      <Link
        Include="%(hppDirsToMake.Identity)"
        Condition="'%(Extension)'=='.obj' or '%(Extension)'=='.res' or '%(Extension)'=='.rsc' or '%(Extension)'=='.lib'" />
      <Lib
        Include="%(hppDirsToMake.Identity)"
        Condition="'%(Extension)'=='.obj' or '%(Extension)'=='.res' or '%(Extension)'=='.rsc' or '%(Extension)'=='.lib'" />
      <ImpLib
        Include="%(hppDirsToMake.Identity)"
        Condition="'%(Extension)'=='.obj' or '%(Extension)'=='.res' or '%(Extension)'=='.rsc' or '%(Extension)'=='.lib'" />
    </ItemGroup>
    <MakeDir
      Directories="@(hppDirsToMake-&gt;'%(RootDir)%(Directory)')" />
  </Target>

  <Target
    Name = "Clean_hpp"
    Condition="'@(hpp)' != ''">
      <ItemGroup>
          <FilesToDelete Include="%(hpp.RootDir)%(hpp.Directory)%(hpp.Filename).intergen."/>
      </ItemGroup>

      <!--<Delete Files="@(FilesToDelete)" TreatErrorsAsWarnings="true" />-->
      <Exec Command="del /F /Q &quot;@(FilesToDelete,'deps&quot; &quot;')deps&quot;"/>
      <Exec Command="del /F /Q &quot;@(FilesToDelete,'cpp&quot; &quot;')cpp&quot;"/>
      <Exec Command="del /F /Q &quot;@(FilesToDelete,'js.cpp&quot; &quot;')js.cpp&quot;"/>
      <!--<Exec Command="del /F /Q &quot;@(FilesToDelete,'jsc.cpp&quot; &quot;')jsc.cpp&quot;"/>-->
      <Exec Command="del /F /Q &quot;@(FilesToDelete,'lua.cpp&quot; &quot;')lua.cpp&quot;"/>
      <Exec Command="echo &quot;@(FilesToDelete,'cpp&quot; &quot;')cpp&quot;"/>
  </Target>
  <Target
    Name = "Clean"
    DependsOnTargets = "Clean_hpp">
  </Target>
</Project>